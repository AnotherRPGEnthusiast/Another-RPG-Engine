:: Preparation
<<set $B = {turn: "player", turnCounter: 0, event: false, surrender: false, kills: [], specialdeath: 0}>>
<<restock>>
<<call $scenario>>
<<refreshPuppets>>
<<set $inbattle to true>>
<<goto "Battle!">>

:: Battle![nobr battle]
<<specialcheck>>
<<victorycheck>>

<span id="status">
<<include status>>
</span>

<span id="content">
<<include actorlist>>
<<include commands>>
<br/>
<center><span class="battlebtn"><<button "END TURN" "end of round">><<set $B.turn = "enemy">><</button>></span></center>
<br/>
<br/>
<span id="quit"><<include "Quit Button">></span>
<div style="font-weight:bold; float:right">ROUND <<print $B.turnCounter>></div>
</span>
:: Quit Button[nobr]
<<link "Surrender and return to the Hub">><<replace "#quit">>Really quit? [[Yes|Defeat]] | <<link "No">><<replace "#quit">><<include "Quit Button">><</replace>><</link>><</replace>><</link>>

:: commands[nobr]
<div class="commandcontainer">
<<for _i, _puppet range $puppets>>
	<div class="commands">
	<<if _puppet.dead is true>>
	/* If puppet is defeated, display no commands. */
	<<elseif _puppet.stunned is true>>
		<div class="noact">
		Stunned!
		</div>
	<<elseif _puppet.petrified is true>>
		<div class="noact">
		Petrified!
		</div>
	<<elseif _puppet.asleep is true>>
		<div class="noact">
		Asleep!
		</div>
	<<elseif _puppet.isDone is true>>
		<div class="noact">
		Done!
		</div>
	<<else>>
		<<act `[$puppets[_i],"$puppets["+_i+"]"]`>><br />
		<<rest `[$puppets[_i],"$puppets["+_i+"]"]`>><br />
		<<items `[$puppets[_i],"$puppets["+_i+"]"]`>><br />
		<<if $B.surrender is true>>
			<<spare `[$puppets[_i],"$puppets["+_i+"]"]`>><br/>
		<</if>>
	<</if>>
	</div>
<</for>>
</div>

:: actorlist[nobr]
<<set _class = "actors enemies">>
<<if $scenario is "reverse display">>
<<set _class += " reverse">>
<</if>>

<div @class="_class" id="enemies">
<<for _i, _enemy range $enemies>>
	/* Some enemies have special name displays */
	<<if def _enemy.fullname>>
		<<set _name = _enemy.fullname>>
	<<else>>
		<<set _name = _enemy.name>>
	<</if>>

	<<if _enemy.boss is true>>
		<<set _class = "actor full">>
	<<else>>
		<<set _class = "actor">>
	<</if>>
	
	<div class="actor">
	<<if _enemy.dead is true>>
		<font color="gray">_name</font><br/>
		<br />
	<<else>>
		<<if ($B.targeting == "enemy" or $B.targeting == "all") and not _enemy.untargetable and not _enemy.protected>>
			<<capture _i>>
[[_name|confirm phase][$target = [$enemies[_i],"$enemies["+_i+"]"]; $B.targeting = null]]
			<</capture>> 
		<<else>>
			<span class="actorname">_name</span>
		<</if>>
		<<capture _i>><<status `[$enemies[_i],"$enemies["+_i+"]"]`>><</capture>>
		<br />
		HP: _enemy.hp
	<</if>>
	</div>
<</for>>

</div>

<br/>

/* puppets */
<div class="actors" id="puppets">

<<for _i, _puppet range $puppets>>
	<div class="actor">
		<<if _puppet.dead is true>>
			<font color="gray">_puppet.name</font><br/>
			<br/>
			<br/>
		<<else>>
			<<if ($B.targeting == "ally" or $B.targeting == "all") and !($subject[0].name == _puppet.name and def $B.selftargeting)>>
				<<capture _i>>
[[_puppet.name|confirm phase][$target = [$puppets[_i],"$puppets["+_i+"]"]; $B.targeting = null]]
				<</capture>>
			<<else>>
				<span class="actorname">_puppet.name</span>
			<</if>>
			 <<capture _i>><<status `[$puppets[_i],"$puppets["+_i+"]"]`>><</capture>>
			<br />
			HP: _puppet.hp<br />
			EN: _puppet.en / 10
		<</if>>
	</div>
<</for>>

</div>

:: status[nobr]
<<if def $actor and $actor[0] isnot null>>

<div class="statusname">$actor[0].name</div>
<div style="float: right;">
<<link "<">>
	<<set $stScreen-->>
	<<if $stScreen < 1>>
		<<set $stScreen = 3>>
	<</if>>
	<<replace "#status">><<include "status">><</replace>>
<</link>> 
<<link ">">>
	<<set $stScreen++>>
	<<if $stScreen > 3>>
		<<set $stScreen = 1>>
	<</if>>
	<<replace "#status">><<include "status">><</replace>>
<</link>>
</div>
<br/>
<<if $stScreen == 1>>
<<for _k, _v range $actor[0].stats>>
<span class="statname"><<print _k>>:</span>
<span class="stat"><<stat _k>></span>
<br/>
<</for>>
<<elseif $stScreen == 2>>
<div style="font-size: 12px;">ELEMENTAL RESISTANCE</div><br/>
<<for _k, _v range $actor[0].elements>>
<span class="statname"><<print _k>></span>
<span style="float:right"><<res _k>></span>
<br/>
<</for>>
<<elseif $stScreen == 3>>
<div style="font-size: 12px;">AILMENT TOLERANCE</div><br/>
<<for _k, _v range $actor[0].tolerances>>
<<print _k>>
<<tol _v>>
<br/>
<</for>>
<</if>>
<br/>
<<effectinfo>>

<</if>>

:: actions[nobr battle]
<span id="status">
<<include status>>
</span>

<span id="content">
<<include actorlist>>

<<backbtn>><br/><br/>

<<actionlist $subject[0]>>
</span>

:: items[nobr battle]
<span id="status">
<<include status>>
</span>

<span id="content">
<<include actorlist>>
<<backbtn>>
<<itemlist>>
</span>

:: targeting phase[nobr battle]
<span id="status">
<<include status>>
</span>

<span id="content">
<<include actorlist>>
<<backbtn>>

Select a target.
</span>

<<if $B.targeting == "enemy">>
	<<find "$enemies" "martyr" "true">>
	<<if _pos > -1>>
		<<set $target = [$enemies[_pos],"$enemies["+_pos+"]"]>>
   		<<set $B.targeting to null>>
   		<<goto "confirm phase">>
	<</if>>
<</if>>

:: confirm phase[nobr battle]
<span id="status">
<<include status>>
</span>

<span id="content">
<<include actorlist>>
<<backbtn>>

$subject[0].name will 

<<if $action.name is "rest">>
	<b>rest</b> this turn.
<<elseif $action.name is "struggle">>
	spend $struggleCost Energy to get back on <<print subject().their>> feet.
<<elseif $action.item is true>>
	use <<switch $action.name.first().toLowerCase()>><<case 'a' 'e' 'i' 'o' 'u'>>an<<default>>a<</switch>> $action.name.
<<elseif $action.name is "spare">>
	accept the enemy's surrender.
<<else>>
	use <b>$action.name</b><<if $target[0] isnot null>> on <b>$target[0].name</b><</if>>.
<</if>>
 [[Confirm?|action phase]]<br />
<span class="preview">
<<if $action.preview instanceof Function>>
	<<print $action.preview()>>
<<else>>
	<<print $action.preview>>
<</if>>
</span>
</span>

:: action phase[nobr battle]
<span id="content">

<<if $action.name == "spare">>
	<<run $enemy_to_spare.surrender()>>
<</if>>

<<include "action effects">>

/* Variable cleanup. Due to the way goto works, this will work even for invisible actions. */

/* If target was an enemy (i.e. an attacking skill was used), subject is marked as attacker. (This is for enemies that target the last puppet to attack them.) */
<<if $target[0] instanceof Enemy>>
	<<set $attacker = $puppets.indexOf($subject[0])>>
<</if>>

/* If action was an item, decrement item stock and reset item flag */
<<if $B.turn == "player" && $action instanceof ItemAction>>
	<<print $inv.decItem($action.name)>>
<</if>>

/* isDone logic; checks for confounding factors */
<<if $B.instant is true>>
	<<set $B.instant to false>>
<<elseif $subject[0].inspired is true>>
	<<set $subject[0].inspired to false>>
<<else>>
	<<set $subject[0].isDone to true>>
<</if>>

/* Subtract action cost */
<<if $action.name isnot "Focus">>
	<<set $subject[0].en -= $action.cost>>
<</if>>

/* Archer's mark attacks */
<<markAttack>>

<<if $B.surrender && def $action.name>>
	<<print $enemy_to_spare.surrenderCheck()>>
<</if>>

<br/>
<center><<button "Continue..." "Battle!">><</button>></center>

</span>

:: action effects[nobr]
/* Where the action actually happens. Kept separate from action phase for modularity purposes. */

<<switch $action.name>>
	<<case "rest" "struggle" "Reload" "Procure">>
/* These actions display no action text and take the player immediately back to the battle hub. */
		<<switch $action.name>>
			<<case "rest">>
				<<if $subject[0].winded is true>>
					<<for _k, _effect range $subject[0].effects>>
						<<if _effect.name is "Winded">>
							<<print subject().removeEffect(_effect)>>
						<</if>>
					<</for>>
				<</if>>
			<<case "struggle">>
				<<for _k, _effect range $subject[0].effects>>
					<<if _effect.name is "Knocked Down">>
						<<print subject().removeEffect(_effect)>>
					<</if>>
				<</for>>
			<<case "Reload">>
				<<find "$subject[0].actions" "name" "\'Reload\'">>
				<<set $subject[0].actions[_pos] = new Action("Crossbow")>>
			<<case "Procure">>
				<<run $inv.get($item_to_procure).stock += 1>>
  		<</switch>>
		<<goto "Battle!">>

<<default>>

/* Flavor text relating to the action. It is a div element, making it a separate block from the gameplay effects. By default, it has a bottom margin of 1em to create a separator between flavor text and gameplay text. */

<div id="actFlavor">

/* First is action use text. A regular action takes the form "Actor uses..." Items take the form "Actor uses a/n..." This is a div element, which means it creates an automatic line break. */

<<if $action.useText !== null>>
/* Set useText to null to bypass this element. This is useful if you only want one of the two areas to display. */
<div id="useText">
<<if $action.useText instanceof Function>>
	<<print $action.useText()>>
<<else>>
	<<print $action.useText>>
<</if>>
</div>
<</if>>

<<include "battle interruptions">>

/* Then descriptive text. This is a div element, so it creates an automatic line break. */

<<if $action.actText !== null>>
/* Set actText to null to bypass this element. This is useful if you only want one of the two areas to display. */
<div id="actText">
<<if $action.actText instanceof Function>>
	<<print $action.actText()>>
<<else>>
	<<print $action.actText>>
<</if>>
</div>
<</if>>

</div> /* close flavor text div */

/* Then effects. */
<<if $action.act !== null>>
<div id="actEffect">

<<if def _targetingMsg>>
/* This section covers text that has to be generated elsewhere for various reasons, such as the alert for a Protector covering another character. */
<<print _targetingMsg>>
<<unset _targetingMsg>>
<</if>>

<<if $action.act instanceof Function>>
<<print $action.act()>>
<<else>>
<<print $action.act>>
<</if>>

</div> /* close action effects div */
<</if>>

<</switch>>

:: spell phase[nobr battle]
<span id="status">
<<include status>>
</span>

<span id="content">
<<include actorlist>>
<<backbtn>>

<<if isNaN($action.cost)>>
You need to input a number.<br/>
<<elseif $action.cost < $B.mincost>>
Spell requires at least $B.mincost Energy.<br/>
<<elseif $subject[0].en < $action.cost>>
Not enough Energy!<br/>
<</if>>

How much Energy do you want to put into $action.name? (Minimum $B.mincost)<br />
<<textbox "$action.cost" $B.mincost "spell check" autofocus>><br/>
(Press Enter to confirm.)<br/>
</span>

:: spell check[nobr]
<<run console.log("$action.cost before adjust = "+$action.cost)>>
<<run $action.cost *= 1>>
<<if ($action.cost < $B.mincost) or ($subject[0].en < $action.cost) or isNaN($action.cost)>>
<<goto "spell phase">>
<<else>>

<<run console.log("$action.cost after adjust = "+$action.cost)>>
<<run $action.spellMod()>>

<<if $action.phase != "confirm phase">>
	<<set $B.targeting = $action.target>>
	<<goto "targeting phase">>
<<else>>
	<<print '<<goto \"'+$action.phase+'\">>'>>
<</if>>

<</if>>

:: end of round[nobr battle]
<span id="status">
<<include status>>
</span>

<span id="content">
<<include actorlist>>

<<if $B.turn eq "player">>
/* If the turn reads "player", it's because the enemy round just finished. Run end of turn for enemies. */
	<<endofround $enemies>>
	<<newturn>>
	<<if _message>>
		[[(Continue...)|Battle!]]
	<<else>>
		<<goto "Battle!">>
	<</if>>
	
<<elseif $B.turn eq "enemy">>
/* If the turn reads "enemy", the player turn just finished. Run end of turn for player. */
	<<endofround $puppets>>
	<<if _message>>
		[[(Continue...)|enemy phase]]
	<<else>>
		<<goto "enemy phase">>
	<</if>>
<</if>>
</span>

:: enemy phase[nobr battle]
<span id="status">
<<include status>>
</span>

<span id="content">

<<for _e, _enemy range $enemies>>
	<<if !_enemy.dead>>
		<<set $subject = [$enemies[_e],"$enemies["+_e+"]"]>>
		<<set $target = [null,null]>>
		<<for _k, _effect range _enemy.effects>>
			<<if _effect.topDec>>
				<<run _enemy.removeEffect(_effect,'pierce')>>
		  	<</if>>
	  	<</for>>
	  	<<if _enemy.stunned>>
		  	<<set $action = {useText: null,
			  actText: "_enemy.name is stunned!",
			  act: null}>>
		  	<<run _enemy.decCD()>>
	  	<<elseif _enemy.down>>
		  	<<set $action = {useText: null,
			  actText: "_enemy.name struggles back to _enemy.their feet.",
			  act: null}>>
		<<for _k, _effect range _enemy.effects>>
			<<if _effect.name is "Knocked Down">>
				<<run _enemy.removeEffect(_effect,'pierce')>>
			<</if>>
		<</for>>
	<<else>>
		<<run _enemy.decCD()>>
		<<set $action = null>>
		<<run _enemy.actions()>>
	<</if>>
	<<if !_targetfail>>
		<<include "action effects">><br/>
	<</if>>

	<<hunterCheck>>
	<</if>>
<</for>>

<center><<button "Continue..." "end of round">><<set $B.turn = "player">><</button>></center>
</span>