:: Widgets: Leveling Up[nobr widget]
<<widget "XP_to_next">>
/* Calculates the XP required for the next level. Pokemon's formulas are the default; change as necessary. */

<<set _char = $args[0]>>

<<if _char.levelRate is "fast" or _char.name is "Fighter">>
/* This conditional demonstrates how you can set XP formulas as general attributes or make them unique for specific characters. */
	<<set _toNext = (4*(_char.level)^3)/5>>
<<elseif _char.levelRate is "medium" or _char.name is "Rogue">>
	<<set _toNext = _char.level^3>>
<<elseif _char.levelRate is "slow" or _char.name is "Mage">>
	<<set _toNext = (5*(_char.level)^3)/4>>
<<else>>
/* display an error or default formula here */
<</if>>

<<set _toNext = Math.floor(_toNext)>>
<</widget>>

<<widget "levelcheck">>
<<set _keepGoing = true>>
<<for _keepGoing>>
	<<set _keepGoing to false>>
	<<for _puppet range $puppets>>
		<<XP_to_next _puppet>>
		<<if _puppet.level <= $LEVEL_CAP and _puppet.XP >= _toNext>>
			<<LevelUp _puppet>>
			<<set _keepGoing = true>>
			/* This is needed if you want it to be possible for characters to level up multiple times within the same widget call. This ensures the whole check will be done again to check if the puppet's XP matches the requirement for the next level too. */
		<</if>>
	<</for>>
<</for>>
<</widget>>

<<widget "LevelUp">>
/* To implement this, you will need to enable the level up code detailed in the story JavaScript. */

<<set _char = $args[0]>>
<<set _char.level++>>

_char.name has reached Level <<print _char.level>>!<br/>

<<for _key, _rate range _char.growthRates>>
	<<run _char.getBase(_key) += _rate>>
	<<print _key>> +<<print _rate>> = <<print _char.getBase(_key)>><br/>
<</for>>

/* You could also make the growth rate a formula that changes based on level. You could calculate it through a similar widget to the XP_to_next widget. */

<<switch _char.level>>
	<<case 2>>
		<<run _char.actions.push($Level_2_Skill)>>
		Learned \"<<print $Level_2_Skill.name>>\"!<br/>
	/* and so on */
<</switch>>

<<if (_char.level % $num) == 0>>
/* This is a handler for if you want to provide a special bonus at certain intervals. For instance, Dungeons & Dragons provides a stat point every 4 levels. This if case will trigger every $num levels. */
<</if>>
<br/>
<</widget>>

<<widget "LevelUp_WithLookupTable">>
<<set _char = $args[0]>>
<<set _char.level++>>

_char.name has reached Level <<print _char.level>>!<br/>

<<set _gain = _char.StatTable()>>

/* Where StatTable is a function containing a switch statement that returns a Map of gain rates for each level case. */
/* e.g.
this.StatTable = function () {
	switch (this.level) {
		case 2:
			return new Map([
				["StatA",num],
				["StatB",num],
				["New Skill",$Level_2_Skill]
				(...)
				])];
			break;
		case 3:
			return new Map([
				(...)
				])];
			break;
			
			(etc.)
	}
}
*/
/* You would set this in the puppet database. The advantage to this is that it handles all the processing at once on startup, reducing the time necessary to operate this widget. */

<<for _key, _value range _gain>>
	<<if _key == "New Skill">>
		<<run _char.actions.push(_value)>>
		Learned \"<<print $Level_2_Skill.name>>\"!<br/>
	<<else>>
		<<run _char.getBase(_key) += _value>>
		<<print _key>> +<<print _rate>> = <<print _char.getBase(_key)>><br/>
	<</if>>
<</for>>
<br/>
<</widget>>

:: Point-buy interface example[nobr]
/* Presumably the player would get here by clicking a link from a menu passage of some kind. We'll assume this link set the $subject variable to the character in question. */

<<set $subject[0] = $puppets[0]>>
<<set $subject[0].statPoints = 3>>

<<set _curr = new Map()>>
<<run _curr.set("points",$subject[0].statPoints)>>

<<for _key, _value range $subject[0].stats>>
	<<run _curr.set(_key,_value.Base)>>
<</for>>

<div id="stats">
<<include "statblock">>
</div>

/* This is for a regular stat point system. For a more complex point-buy system, you'd just use the "getStatCost" function and check stat points/XP against that instead of 0. */

<br/>Leaving this screen will make stat investments permanent!<br/>
<br/>
<<return>>/* Presumably you would have a link back to the menu or whatever here */

:: statblock[nobr]
Leveling up $subject[0].name!<br/>
<br/>
Current stat points: $subject[0].statPoints / <<print _curr.get("points")>><br/>
<<for _key, _value range $subject[0].stats>>
<<capture _key, _value>>
	<span class="statname"><<print _key>>:</span> _value.Base 
	<<if $subject[0].statPoints > 0>>
	[<<link "+">>
		<<replace "#stats">>
			<<run _value.Base++>>
			<<run $subject[0].statPoints-->>
			<<include "statblock">>
		<</replace>>
	<</link>>]
	<</if>>
	<<if $subject[0].statPoints > 0 and _value.Base > _curr.get(_key)>> / <</if>>
	<<if $subject[0].statPoints < _curr.get("points") and _value.Base > _curr.get(_key)>>
	[<<link "-">>
		<<replace "#stats">>
			<<run _value.Base-->>
			<<run $subject[0].statPoints++>>
			<<include "statblock">>
		<</replace>>
	<</link>>]
	<</if>>
	<br/>
<</capture>>
<</for>>