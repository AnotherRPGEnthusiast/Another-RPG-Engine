:: General Widgets[widget nobr]
<<widget "victorymessage">>
<<set _m = random(1,4)>>
<<switch _m>>
<<case 1>>
You win!
<<case 2>>
Victory!
<<case 3>>
You've won!
<<case 4>>
You are victorious! /* this is a reference to an old game, cookies if you recognize it */
<</switch>>
<</widget>>

<<widget "backbtn">>
<span class="btn back right">[[Back|Battle!][$B.targeting = null; $action = null; $B.instant = false; $target = [null,null]; $removed_effects = [];]]</span>
<</widget>>

<<widget "act">>
<<if _puppet.down is true>>
	<<if $args[0][0].en >= $struggleCost>>
		[[Struggle|confirm phase][$subject = $args[0]; $action = {name: "struggle", cost: $struggleCost}; $target = [null,null] ]]
	<<else>>
		<b>Exhausted!</b>
	<</if>>
<<else>>
	[[Act|actions][$subject = $args[0]]]
<</if>>
<</widget>>

<<widget "rest">>
[[Rest|confirm phase][$subject = $args[0]; $action = {name: "rest", cost: 0}; $target = [null,null] ]]
<</widget>>

<<widget "items">>
<<if $B.embargo is true>>
	<span class="embargo">
	Nope!
	</span>
<<else>>
	[[Item|items][$subject = $args[0]]]
<</if>>
<</widget>>

<<widget "spare">>[[Spare|confirm phase][$subject = $args[0]; $action = {name: "spare", cost: 0}]]<</widget>>

<<widget "victorycheck">>
<<set _victory to 0>>
<<set _defeat to 0>>
<<for _enemy range $enemies>>
	<<if _enemy.dead>>
		<<set _victory++>>
	<</if>>
<</for>>
<<if _victory eq $enemies.length>>
	<<goto "Victory">>
<</if>>
<<for _puppet range $puppets>>
	<<if _puppet.dead>>
		<<set _defeat++>>
	<</if>>
<</for>>
<<if _defeat eq $puppets.length>>
	<<goto "Defeat">>
<</if>>
<</widget>>

<<widget "refreshPuppets">>
/* Refreshes puppets to resting states. Use this to tidy up any flags or changes that might occur in battle. */

<<for _puppet range $puppets>>
	<<set _puppet.hp = _puppet.maxhp>>
	<<set _puppet.en = 5>>
	<<set _puppet.isDone = false>>
	<<set _puppet.inspired = false>>
	<<for _k, _effect range _puppet.effects>>
		<<run _puppet.removeEffect(_effect,"pierce")>>
	<</for>>
	<<find "_puppet.actions" "name" "\'Reload\'">>
	<<if _pos > -1>>
		<<set _puppet.actions[_pos] = new Action("Crossbow")>>
	<</if>>
<</for>>
<</widget>>

<<widget "removeEffect">>
/* DEPRECIATED as of v0.91. Use Actor.removeEffect instead. */
<<set _actor = $args[0]>>
<<set _effect = $args[1]>>
<<if _actor.stasis is false or $args.includes("pierce")>>
	<<set _effect.duration = 0>>
	<<effectmanager _actor>>
<</if>>
<</widget>>

<<widget "check">>
<<print '<<if '+$args[0]+' < 0>>\n
<<set '+$args[0]+' to 0>>\n
<</if>>'>>
<</widget>>

<<widget "chain">>
<<for _i, _a range $args>>
	<<if def $args[_i] and $args[_i] isnot null and $args[_i][1] isnot null>>
		<<set $args[_i][0] = State.getVar($args[_i][1])>>
	<</if>>
<</for>>
<</widget>>

<<widget "endofbattle">>
<<set $inbattle to false>>
<<set $subject = [null,null]>>
<<set $target = [null,null]>>
<<unset $actor>>
<<refreshPuppets>>
<<restock>>
<</widget>>

<<widget "find">>
/* args0 is target array, args1 is attribute, args2 is key value */
/* Note that if your key is a string, it must be in quotes in the final code, which means you must send it to the widget with an extra pair of literal quotes (preceeded by the escape slash) */
<<print '<<set _pos = '+$args[0]+'.map(function(x) { return(x.'+$args[1]+') }).indexOf('+$args[2]+')>>'>>
<</widget>>

// status buttons and display formatting

<<widget "status">>
<span class="right">
<<link "[*]">>
	<<if $args[0] eq $actor>>
		<<set $actor = [null,null]>>
	<<else>>
		<<set $actor to $args[0]>>
		<<set $stScreen = 1>>
	<</if>>
	<<replace "#status">><<include "status">><</replace>>
<</link>>
</span>
<</widget>>

<<widget "effectinfo">>
<<for _k, _effect range $actor[0].effects>>
<<if _effect.invisible isnot true>>
	<div class="effectinfo">
	<u>_effect.name</u> 
	<<if _effect.duration >= 0>>
		<span class="duration">_effect.duration turns</span>
	<</if>><br/>
	<span class="effectdesc">
	<<print _effect.info()>>
	</span>
	</div><br/>
<</if>>
<</for>>
<</widget>>

<<widget "stat">>
/* Designed by greyelf */
	/* Check that a Stat Name was passed to the widget. */
	<<if $args.length is 0>>
		ERROR
	<<else>>
		<<set _current to $actor[0].get($args[0]) >>
		<<set _base to $actor[0].getBase($args[0]) + $actor[0].getBonus($args[0]) >>

		/* Check if the Stat has been raised. */
		<<if _current > _base >>
			@@.stat-raised;_current@@

		/* Check if the Stat has been lowered. */
		<<elseif _current < _base >>
			@@.stat-lowered;_current@@

		/* The Stat has not changed. */
		<<else>>
			_current
		<</if>>
	
	<</if>>
<</widget>>

<<widget "res">>
/* Check that an argument was passed to the widget. */
	<<if $args.length is 0>>
		ERROR
	<<else>>
		<<set _r = $actor[0].elements.get($args[0])>>
		<<set _r = Math.round((_r - 1) * -100)>>

		/* Weakpoint? */
		<<if _r < 0 >>
			@@.stat-lowered;<<print _r>>%@@

		/* Absorbance? */
		<<elseif _r > 100 >>
			<<run _r -= 100>>
			@@.green;+<<print _r>>%@@
		
		/* Resistance? */
		<<elseif _r > 0 >>
			@@.stat-raised;<<print _r>>%@@
			
		<<else>>
			<<print _r>>%
		<</if>>
	
	<</if>>
<</widget>>

<<widget "tol">>
	<<if $args.length is 0>>
		ERROR
	<<else>>
	
		/* Unlike other status widgets, this is passed the value, not the key. */
		<<set _v = $args[0]>>
		<span class="duration">
		
		/* Immunity? */
		<<if _v.immune>>
			X
		
		/* Tolerance? */
		<<elseif _v.cur > 0>>
			<<print _v.cur>>
			
		/* Tolerance exhausted? */
		<<elseif _v.cur == 0>>
			!
		<</if>>
		</span>
	
	<</if>>
<</widget>>

<<widget "statOOB">>
/* For displaying stats outside of battle. Base and equipment mods are displayed separately here. If you wish for effect mods to persist outside of battle, you could include them as well. */

	<<if $args.length is 0>>
		ERROR
	<<else>>
		<<set _mod to $actor[0].getBonus($args[0]) >>
		<<set _base to $actor[0].getBase($args[0])>>
		
		<<print _base>> 

		/* Check if equipment mod is positive. */
		<<if _mod > 0 >>
			@@.green;<<print "\+"+_mod>>@@

		/* Check if equipment mod is negative. */
		<<elseif _mod < 0 >>
			@@.stat-lowered;<<print "-"+_mod>>@@

		<<elseif _mod == 0>>
			/* display nothing */
		<</if>>
	
	<</if>>
<</widget>>

<<widget "neutralize">>
/* Determines effects to be removed by Neutralize and Restoration. */
/* Because these actions are so similar, the same widget can be used for both. */

<<if $target[0].stasis isnot true>>
/* Stasis blocks any effect changes, so it blocks this too. */
<<set _effects to $target[0].effects>> /* This is done just so you don't have to write out the longer name */
<<for _i = (_effects.length-1); _i >= 0; _i-->>
/* Loop runs over the effects array starting from the END and working backwards. This is why we can't use a "range" loop, because that only goes forwards. */
	<<if $effects_to_remove <= 0>>
		<<break>>
/* The number of effects removed by Neutralize/Restoration varies depending on energy invested. If there are more effects than the spell can remove, we end the function here. Otherwise the spell would clear all effects regardless of strength! */
	<</if>>
	<<if $target[0] instanceof Puppet is true>>
		<<if _effects[_i].buff isnot true and _effects[_i].sticky isnot true>>
/* Because there are fewer buffs than debuffs, a single "buff" flag is used to distinguish them. We only want Restoration to remove debuffs, so it will only trigger the removal code if the effect's buff flag is NOT true. */
/* You may also want some effects to be irremovable. This is the purpose of the "sticky" flag, which is set in the story JavaScript. */
			<<run $removed_effects.push(_effects[_i])>>
			<<set $effects_to_remove -= 1>>
		<</if>>
	<<elseif $target[0] instanceof Enemy is true>>
		<<if _effects[_i].buff is true and _effects[_i].sticky isnot true>>
			<<run $removed_effects.push(_effects[_i])>>
			<<set $effects_to_remove -= 1>>
		<</if>>
	<</if>>
<</for>>
<</if>>
<</widget>>

<<widget "newturn">>
<<set $SacrificeUsed to false>>
<<for _puppet range $puppets>>
	<<set _puppet.isDone to false>>
	<<for _k, _effect range _puppet.effects>>
		<<if _effect.topDec>>
			<<print _puppet.removeEffect(_effect,"pierce")>>
		<</if>>
	<</for>>
	<<if _puppet.winded is false>>
		<<set _puppet.en += $ENregen>>
	<</if>>
<</for>>
<</widget>>

<<widget "endofround">>
/* <<run console.log("End of round start")>> */
<<for _actor range $args[0]>>
	/* <<run console.log(_actor.name)>> */
        <<for _k, _effect range _actor.effects>>
			/*
			<<run console.log("Index #"+_k)>>
			<<run console.log(_effect.name)>>
			<<run console.log("Time = "+_effect.duration)>>
			*/
                /* DoT check */
                <<if _effect.dot is true>>
                        <<set _message to true>>
                        <<set $dmg = _effect.damage(_actor)>>
						<<print _effect.msg(_actor)>>
                        <br/>
                        <<run _actor.setHP(-$dmg)>>
                        <<set $target[0] = _actor>>
                        <<deathcheck>>
                <</if>>
                
                /* decrementor */
                <<if !_effect.topDec>>
					<<if _effect.duration >= 1 and !(_actor.stasis is true and _effect.name != "Stasis")>>
                    	<<set _effect.duration -= 1>>
					<</if>>
					/* <<run console.log("Time = "+_effect.duration)>> */
                	<<if _effect.duration == 0>>
                    	<<set _m = _actor.removeEffect(_effect,'pierce')>>
						<<if _m.length > 0>>
							<<print _m>>
							<<set _message to true>>
						<</if>>
                	<</if>>
				<</if>>
        <</for>>
<</for>>
<</widget>>

<<widget "actionlist">>
/* Widget for display of player actions. */
/* Sacrifice's HP cost is set in StoryInit. Default is 50. */
/* Individual action widgets take cost, damage multiplier, and other relevant variables as arguments so they can be displayed in the description. Values are given in "Database: Actions". */
/* Self-targetting and AoE abilities must set target to null to make certain other things line up. */

<<set _char = $args[0]>>
<<for _action range _char.actions>>
<b><<if $args[0].en < _action.cost or $tutorial is true or (_action.name is "Sacrifice" and $SacrificeUsed is true)>>
/* If insufficient energy, just display the action name (no link). */
_action.name
<<elseif $args[0].dizzy is true and _action.basic isnot true>>
/* If dizzy and action not basic, display the name as crossed out followed by a gray "Dizzy!" message. */
<del>_action.name</del> <span class="dizzy">Dizzy!</span>
<<elseif $args[0].hp <= _action.hpcost>>
/* If puppet has insufficient HP for an HP-consuming skill, the name is crossed out. */
<del>_action.name</del> Not enough HP!
<<else>>
	<<capture _action>>
	<<link "_action.name">>
		<<set $action = clone(_action)>>
		<<set $B.targeting = _action.target>>
		<<set $B.selftargeting = _action.self>>
		<<set $B.instant = _action.instant>>
		<<if _action.phase is "confirm phase">>
			<<set $target = [null,null]>>
			<<set $B.targeting = null>>
		<<elseif _action.phase is "spell phase">>
			<<set $B.mincost = _action.cost>>
			<<set $B.targeting = null>>
		<</if>>
		<<print '<<goto "'+_action.phase+'">>'>>
	<</link>>
	<</capture>>
<</if>>
</b> <<if _action.name isnot "Procure">>(<<print _action.cost>><<if _action.phase is "spell phase">>+<</if>>)<</if>><<if _action.instant>><span class="right">[Instant] </span><</if>> <<if _action.basic>><span class="right">[Basic] </span><</if>><br />
<div><<print _action.info>></div>
<div class="actdesc"><<print _action.desc>></div>
<br/>
<</for>>
<</widget>>

/* Set Inventory: sets initial inventory items and stock. Run in StoryInit. */
<<widget "setInv">>
<<set $inv = new Inventory([
	new Item("Antidote",5),
	new Item("Fire Extinguisher",5),
	new Item("Canned Air",5),
	new Item("Healing Crystal",5),
	new Item("Nanites",5),
	new Item("Painkiller",5),
	new Item("Asprin",5),
	new Item("Panacea",1),
	new Item("Bottled Chi",3),
	new Item("Stimulant",3),
	new Item("Adrenaline",2),
	new Item("Stoneskin",2),
	new Item("Nootropic",2),
	new Item("Throwing Knife",5),
	new Item("Grenade",1),
	new Item("Flamethrower",1),
	new Item("Gas Bomb",1),
	new Item("Calamity Bomb",1),
	new Item("Flashbang",1)
	])>>
<</widget>>

/* Restock: sets starting inventory values for each battle. */
<<widget "restock">>
<<for _k, _v range $inv>>
	<<switch _k>>
		<<case "Antidote" "Fire Extinguisher" "Canned Air" "Healing Crystal" "Nanites" "Painkiller" "Asprin">>
			<<set _v.stock = 5>>
		<<case "Panacea">>
			<<set _v.stock = 1>>
		<<case "Bottled Chi">>
			<<set _v.stock = 3>>
		<<case "Adrenaline" "Stoneskin" "Nootropic">>
			<<set _v.stock = 2>>
		<<case "Stimulant">>
			<<set _v.stock = 3>>
		<<case "Throwing Knife">>
			<<set _v.stock = 5>>
		<<case "Grenade">>
			<<set _v.stock = 1>>
		<<case "Flamethrower" "Gas Bomb" "Calamity Bomb" "Flashbang">>
			<<set _v.stock = 1>>
	<</switch>>
<</for>>
<</widget>>

<<widget "itemlist">>
<<for _k, _v range $inv>>
<<if _v.usable == 0 || _v.usable == 1>>
<b>
<<if _v.stock > 0 and $tutorial isnot true>>
	<<capture _v>>
	<<link _k>>
		<<set $action = clone(_v.action)>>
		<<set $B.targeting = $action.target>>
		<<set $B.selftargeting = $action.self>>
		<<set $B.instant = $action.instant>>
		<<if $action.phase is "confirm phase">>
			<<set $target = [null,null]>>
			<<set $B.targeting = null>>
		<</if>>
		<<print '<<goto "'+$action.phase+'">>'>>
	<</link>>
	<</capture>>
<<else>>
_k
<</if>>
</b>
 (Stock: _v.stock)<br/>
<<print _v.info>><br/>
<span class="actdesc"><<print _v.desc>></span><br/>
<br/>
<</if>>
<</for>>
<</widget>>

<<widget "deathcheck">>
<<if $args.length > 0>>
	<<set _targ = $args[0]>>
<<else>>
	<<set _targ = target()>>
<</if>>
<<if _targ.hp <= 0 and _targ.dead is false>>
	<<set _targ.hp = 0>>
	<<for _k _effect range _targ.effects>>
		<<run _targ.removeEffect(_effect,'pierce')>>
	<</for>>
	<<if _targ instanceof Enemy>>
		<<run $B.kills.push(_targ.name)>>
	<</if>>
	<<if _targ.deathMessage is "special">>
		<<goto "specialdeath">>
	<<else>>
		<<set _targ.dead to true>>
		<<print _targ.deathMessage>>
	<</if>>
	<<if _targ.protected is true>>
		<<if _targ instanceof Puppet>>
		  <<find "$puppets" "name" _targ.protectedBy>>
		  <<if _pos > -1>>
			  <<set _p = _pos>>
			  <<set _a = "$puppets["+_pos+"].effects">>
			  <<find _a "name" "\'Protector\'">>
			  <<print $puppets[_p].removeEffect(_a[_pos],'pierce')>>
		  <</if>>
		<<elseif _targ instanceof Enemy>>
		  <<find "$enemies" "name" _targ.protectedBy>>
		  <<if _pos > -1>>
			  <<set _p = _pos>>
			  <<set _a = "$enemies["+_pos+"].effects">>
			  <<find _a "name" "\'Protector\'">>
			  <<print $enemies[_p].removeEffect(_a[_pos],'pierce')>>
		  <</if>>
		<</if>>
	<</if>>
<</if>>
<</widget>>

<<widget "deathcheckOLD">>
/* Old death check method that runs over all characters. Necessary if you plan to inflict damage without specifying a target. */
<<for _enemy range $enemies>>
	<<if _enemy.hp <= 0 and _enemy.dead is false>>
		<<set _enemy.hp = 0>>
		<<run $B.kills.push(_enemy.name)>>
		<<if _enemy.deathMessage is "special">>
			<<print "\n\n...">>
			<<set $B.specialdeath++>>
		<<else>>
			<<set _enemy.dead to true>>
			<<print _enemy.deathMessage>>
			<<for _effect range _enemy.effects>>
				<<set _effect.duration to 0>>
			<</for>>
			<<effectmanager _enemy>> /* to strip effect flags, just in case they can still interfere during the turn */
		<</if>>
	<</if>>
<</for>>
<<for _puppet range $puppets>>
	<<if _puppet.hp <= 0 and _puppet.dead is false>>
		<<set _puppet.hp = 0>>
		<<set _puppet.dead to true>>
		<<print _puppet.deathMessage>>
		<<for _effect range _puppet.effects>>
			<<set _effect.duration to 0>>
		<</for>>
		<<effectmanager _puppet>>
	<</if>>
<</for>>
<</widget>>

/* Widgets for special attacks that occur at nonstandard times. In the default engine, this contains Archer's mark and Hunter attacks. */

<<widget "hunterCheck">>
/* Called in the enemy phase, after every enemy's action. */

	<<if $target[0] instanceof Puppet is true>>
		<<find "$puppets" "hunter" "true">>
		<<if _pos > -1>>
			<<if $puppets[_pos].dead isnot true and $puppets[_pos].noact isnot true>>
				<<set $target[0] to $subject[0]>>
  				<<set $subject[0] to $puppets[_pos]>>
 				<<set $action = new Action("Hunter Counter")>>
				<<include "action effects">>
				<br/>
			<</if>>
		<</if>>
	<</if>>
<</widget>>

<<widget "markAttack">>
/* Called in the action phase, after action is finished. */

<<if $subject[0].name isnot "Archer" and $target[0] instanceof Enemy>>
	<<set _hitlist = []>>
	<<for _enemy range $enemies>>
		<<if _enemy.marked is true>>
			<<run _hitlist.push(_enemy)>>
		<</if>>
	<</for>>

<<if _hitlist.length > 0>>
	<<find "$puppets" "name" "\'Archer\'">>
	<<if _pos > -1>>
		<<if !$puppets[_pos].dead && !$puppets[_pos].noact && $puppets[_pos].en > 0>>
			<br/>
			<<set _subj = $subject[0]; _tar = $target[0]; _temp = $action>>
			<<set $subject[0] = $puppets[_pos]>>
			<<set $action = new Action("Mark Shot")>>
			<<include "action effects">>
			<<if $puppets[_pos].en <= 0>>
				<<for _enemy range $enemies>>
					<<for _k, _effect range _enemy.effects>>
						<<if _effect.name == "Marked">>
							<<run _enemy.removeEffect(_effect,"pierce")>>
						<</if>>
					<</for>>
				<</for>>
			<</if>>
			<<set $subject[0] = _subj; $target[0] = _tar; $action = _temp>>
		<</if>>
	<<else>>
		ERROR: Mark without Archer<br/>
	<</if>>
<</if>>

<</if>>
<</widget>>