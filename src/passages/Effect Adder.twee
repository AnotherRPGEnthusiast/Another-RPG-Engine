:: Effect Adder[widget nobr]
/* Handles effect applications. */

<<widget "addeffect">>
/* Sets power for relevant effects and avoids duplicating an effect if it's already in the array. */
/* args0 is target, args1 is effect name, args2 is duration, args3 is inflictor (where applicable). If you want the power to be a flat value, pass a number instead and it will be used as an override. */

<<set _target = $args[0]>> /* for clarity */
<<set _subject = $args[3]>>

<<if _target.dead isnot true>>
/* No point in applying effect if target defeated. */

/* Create a temporary effect object with only the name. This gives us access to flags such as buff and statmod. */
<<set _E = new Effect($args[1])>>

<<set _found to false>>
<<set _continue to true>>
<<set _msg to false>>

<<if _E.unblockable isnot true>>

<<if _target.stasis is true>>
	<<set _continue to false>>
<</if>>

<<if _continue is true and _target.chi is true and _target != _subject>>
/* self-inflicted statuses ignore Chi Shield */
	<<if _E.buff>>
	/* If applied effect is a buff, all is well, skip ahead */
		<<set _continue to true>>
	<<else>>
_target.name's Chi Shield protected _target.them from the ailment.
		<<set _continue to false>>
	<</if>>
<</if>>

<<if _continue is true && _E.name is "Stunned">>
	<<if _target.alert>>
		<<set _continue to false>>
_target.name saw it coming and wasn't stunned!
	<</if>>
<</if>>

<</if>> /* end unblockable effect if */

<<if _continue is true and (_target.tolerances.has(_E.name) || (_E.name == "Forsaken" && _target.tolerances.has("Curse")))>>
	<<if _target.getTol(_E.name) == 'immune'>>
_target.name is immune to _E.name.
		<<set _continue to false>>
	<<else>>
		<<if _target.getTol(_E.name) > 0>>
_target.name's tolerance to _E.name was weakened.
			<<set _continue to false>>
			<<run _target.decTol(_E.name)>>
		<<else>>
			<<set _continue to true>>
			<<run _target.resetTol(_E.name)>>
		<</if>>
	<</if>>
<</if>>

<<if _continue is true>>

/* First, calculate effect power. */
	/* debuff effects are calculated on first application (do not change if target SPC changes) */
<<if $args[3] instanceof Number>>
	<<set $power = $args[3]>>
<<else>>
	<<if _E.statmod and _E.name isnot "Knocked Down">>
		<<if _E.buff is false>>
			<<effectcalc "debuff">>
		<<else>>
			<<effectcalc "buff">>
		<</if>>
	/* DoT damage is calculated every time it activates, so only attacker's side is applied to effect power here. */
 	<<elseif _E.dot>>
  		<<set $power = [_subject.get("Special"),$action.effweight]>>
 
/* Everything else has no numerical component, but we'll set power to a number to prevent possible glitches. */
 	<<else>>
  		<<set $power = 0>>
	<</if>>
<</if>>

/* Then check for stackable effects. */
<<if _E.stackable>>
	<<print _target.addEffect(new Effect(_E.name,$args[2],$power))>>
<<elseif _E.exclusive>>
	<<for _j, _effect range _target.effects>>
	/* remove all stance effects */
		<<if _effect.exclusive>>
			<<run _target.removeEffect(_effect,'pierce')>>
		<</if>>
	<</for>>
	<<if _E.name is "Protector">>
		<<print _target.addEffect(new Protector(_E.name,$args[2],$power,$target[1]))>>
		<<set $target[0].protected to true>>
		<<set _p = "\'"+_target.name+"\'">> /* necessary to work with the find widget */
		<<set $target[0].protectedBy = _p>>
	<<else>>
		<<if _E.name is "Martyr">>
			<<if _target instanceof Puppet>>
				<<set _party = $puppets>>
			<<elseif _target instanceof Enemy>>
				<<set _party = $enemies>>
			<</if>>
			<<find "_party" "martyr" "true">>
			<<if _pos > -1>>
				<<set _act = _party[_pos]>>
				<<find "_act.effects" "name" "\'Martyr\'">>
				<<run _act.removeEffect(_act.effects[_pos],'pierce')>>
			<</if>>
		<</if>>
		<<print _target.addEffect(new Effect(_E.name,$args[2],$power))>>
	<</if>>
 
<<else>>
  
<<for _k, _effect range _target.effects>>
	<<if _effect.name is _E.name>>
	/* if effect is already applied, increase its duration */
		<<if $args[2] > _effect.duration>>
			<<set _effect.duration = $args[2]>>
			<<print _effect.addText(_target.name)>>
			<<set _msg = true>>
		<</if>>
	
		<<if _E.dot>>
			<<set _E = new DoT(_E.name,$args[2],$power[0],$power[1])>>
			<<if _effect.damage(_target) < _E.damage(_target)>>
				<<set _effect.power to $power[0]>>
				<<set _effect.weight to $power[1]>>
				<<if !_msg>>
					<<print _effect.addText(_target.name)>>
					<<set _msg = true>>
				<</if>>
			<</if>>
		<<else>>
			<<if $power > _effect.power>>
			/* if the new application has higher power than the original effect, overwrite original power */
				<<run _effect.onRemove(_target); _effect.power = $power; _effect.onApply(_target)>>
				<<if !_msg>>
					<<print _effect.addText(_target.name)>>
					<<set _msg = true>>
				<</if>>
			<</if>>
		<</if>>
	
	<<set _found to true>>
	<<break>> /* Since the effect was found, we don't need to continue the loop. */
	
	<</if>>
<</for>>
  
  <<if _found is false>>
  /* if the effect isn't there already, add it */
	<<if _E.dot>>
		<<print _target.addEffect(new DoT(_E.name,$args[2],$power[0],$power[1]))>>
   	<<elseif _E.name is "Off-Balance">>
	/* if already knocked down, can't be off-balance */
     	<<if _target.down is false>>
      		<<print _target.addEffect(new Effect(_E.name,$args[2],$power))>>
     	<<else>>
_target.name would have been pushed off-balance, but they're already knocked down!
     	<</if>>
   	<<elseif _E.name is "Knocked Down">>
	 	<<print _target.addEffect(new Effect(_E.name,$args[2],$power))>>
    	/* Being knocked down also removes off-balance: */
     	<<for _k, _effect range _target.effects>>
      		<<if _effect.name is "Off-Balance">>
       			<<run _target.removeEffect(_effect,'pierce')>>
      		<</if>>
     	<</for>>
	<<else>>
		<<print _target.addEffect(new Effect(_E.name,$args[2],$power))>>
	<</if>>
  <</if>>
<</if>>

<</if>>
<br/>
<</if>>
<</widget>>