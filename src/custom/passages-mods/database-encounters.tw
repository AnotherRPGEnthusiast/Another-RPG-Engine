:: Database: Encounters[nobr widget]
/* This passage allows you to define encounters -- that is, unique parties of enemies. To define individual enemies and characters, see the database JS files. */

<<widget "callEncounter">>
/* The order characters are added to the array matters: they are displayed in that order from left to right when the stat blocks instantiate. */

<<switch $args[0]>>

<<case "at1">>
/* Currently Bubblegum's name is too long and makes her box wider than normal. That's fitting though, maybe I should let it stay. */
<<populateEnemies `["Jake","Princess Bubblegum","Finn"]`>>
<<for _c = 1; _c <= $enemies.length; _c++>>
	<<set $enemies[_c-1].col = _c>>
<</for>>

<<case "gf1">>
<<populateEnemies `["Dipper","Mabel"]`>>

<<case "gum1">>
<<populateEnemies `["Gumball","Anais","Darwin"]`>>

<<case "su1">>
<<populateEnemies `["Pearl","Garnet","Amethyst","Steven"]`>>

<<case "gum2">>
<<populateEnemies `["Nicole"]`>>

<</switch>>

<<if ndef $enemies || $enemies.length == 0>>
	/* Dummy enemy so the display doesn't break. */
	<<set $enemies to [new Enemy()]>>
<</if>>

<<if def $bestiary>>
	<<for _enemy range $enemies>>
		<<if def $bestiary.fetch(_enemy.name)>>
			<<set $bestiary.fetch(_enemy.name).encountered = true>>
		<</if>>
	<</for>>
<</if>>
<</widget>>

<<widget "populateEnemies">>
/* Quick way of populating enemy array. Pass array of names in order corresponding to enemy array order, including nulls for empty spaces. */
/* The passed array must be quoted with backticks. */
<<run console.assert($args[0] instanceof Array,"ERROR in populateEnemies: invalid argument")>>
<<set $enemies = []>>
<<set _array = $args[0]>>
<<for _n, _name range _array>>
	<<if typeof(_name) == 'string'>>
		<<set $enemies.push(new Enemy(_name))>>
	<<else>>
		<<set $enemies.push(_name)>>
	<</if>>
<</for>>
<</widget>>
