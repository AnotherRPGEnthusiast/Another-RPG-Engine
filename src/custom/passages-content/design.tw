:: Design[text info]
RPGs are pretty complicated games, and require a lot of thought in even their most basic elements. Here I'll discuss the reasoning that went into the choices I made when designing the engine, and some potential alternatives.

A look at the game <i><a href="http://bonfire-game.wikia.com/wiki/Bonfire_Game_Wiki" target="_blank">Bonfire</a></i> and the elements listed in its wiki may be instructive, as I purposefully designed the engine to emulate it in many aspects. The program RPG Maker VX Ace is also worth a look, as it has great transparency and modularity in many of its core design principles, as well as a community of designers you can use as a resource. For further reading, you could check out the website <a href="http://howtomakeanrpg.com" target="_blank">How To Make an RPG</a>, which touches on these topics and others. The YouTube series <a href="https://www.youtube.com/channel/UCqJ-Xo29CKyLTjn6z2XwYAw" target="_blank">Game Maker's Toolkit</a> may also be worth viewing, though it is much more general in the topics it covers.

<h1>Table of Contents</h1>
><a href="#dmgform">The Damage Formula</a>
>><a href="#dmgform.basic">The Basics</a>
>><a href="#dmgform.damper">Damping</a>
>><a href="#dmgform.defenses">Subtractive vs. Divisive Defense</a>
>><a href="#dmgform.special">Special Attacks and Weighting</a>
>>><a href="#dmgform.special.1">Lumped Weighting</a>
>>><a href="#dmgform.special.2">Specific Weighting</a>
>>><a href="#dmgform.special.3">Adding Constants</a>
>>><a href="#dmgform.special.4">Skill Progression</a>
>><a href="#dmgform.htk">HP and hit-to-kill ratios</a>
>><a href="#dmgform.random">Randomness and Variance</a>
>><a href="#dmgform.exta">Additional Reading</a>
><a href="#abilities">Designing Abilities</a>
>><a href="#abilities.basic">Before you begin, what are your regular commands?</a>
>><a href="#abilities.resources">Resources and Game Balance</a>
>>><a href="#abilities.resources.mana">Mana Points (Limited Resource)</a>
>>><a href="#abilities.resources.sta">Stamina (Renewable Resource)</a>
>>><a href="#abilities.resources.cd">Cooldown</a>
>>><a href="#abilities.resources.recoil">Recoil/Blowback</a>
>><a href="#abilities.elements">Elemental Effects</a>
>><a href="#abilities.heal">Healing</a>
><a href="#items">Item Design</a>
>><a href="#items.consumable">Consumables</a>
>><a href="#items.equipment">Equipment</a>
><a href="#effects">Status Effects</a>
>><a href="#effects.control">Hold Effects</a>
>><a href="#effects.loss">Loss-of-control / Uncontrollable Effects</a>
>><a href="#effects.statmod">Stat Modification Effects</a>
>><a href="#effects.dot">Damage Over Time</a>
>><a href="#effects.death">Instant Death Effects</a>
>><a href="#effects.protect">Effect Protection</a>
>><a href="#effects.player">Can players use them?</a>
>><a href="#effects.extra">Noteworthy Examples</a>
><a href="#targeting">Targeting and AI</a>
>><a href="#targeting.smart">Smart Targeting</a>
>><a href="#targeting.aggro">Aggro Systems</a>

<h2 id="dmgform">The Damage Forumla</h2>
The basic structure of an RPG is that characters exchange attacks, inflicting damage to wear down their opponent's HP. Well, how do we determine what those numbers will be? What scale are we operating on -- do you want the average attack to throw around numbers in the double digits, triple, quadruple? Most games have some sort of "attack" stat that increases damage, and a "defense" stat that mitigates it, but how exactly do we want them to interact?

The answer depends on you! Small changes to the damage formula can lead to big impacts in how the game plays and how the player interacts with it. The formula I designed for <i>Cartoon Battle</i>, and thus the default formula in this engine, looks like this:

<div class="formula">DMG = (setup.base + (setup.damper * a.atk)) * (weight) - (setup.damper * b.def)</div>
In this section, I'll go over each part of the formula, and give you examples of some alternative formulas you can use if you want a different type of game.

<h3 id="dmgform.basic">The Basics</h3>
The most obvious damage formula is simply Attack minus Defense:

<div class="formula">DMG = a.atk - b.def</div>
However, we run into a problem: if B's Defense is equal to or greater than A's Attack, the attack will do no damage at all. Most RPGs like to have all their stats operate on the same scale, but if you want attacks to do meaningful damage, you will have to consistently make Defense lower than Attack across the board. Maybe you're okay with that, but assuming you're not, how might we fix the problem?

Here's what <i>Bonfire</i>, and this engine, do:

<div class="formula">DMG = C + (a.atk - b.def)</div>
C here stands for "constant". It's a flat number that's the same for every attack. You can think of it as what you want your <b>basic damage</b> to be: how much damage attacks should do on average. If A's Attack and B's Defense are exactly equal -- so, if an average attacker hits an average defender -- the attack will do C damage. This makes it very easy to determine the scale of your battles: if you want big numbers, you can make C something like 200 or 1000; if you want small numbers, you can make C something like 10 or 20. <i>Bonfire</i>'s constant is 20; this engine's is 40 by default.

RPG Maker VX Ace takes a different approach:

<div class="formula">DMG = a.atk * 4 - b.def * 2</div>
This also creates positive damage values for equal Attack and Defense values. If A has 10 Attack and B has 10 Defense, the attack will do 20 damage. The scale of this formula is less immediately clear, but you can still get a pretty good handle on it through careful adjustment of your characters' Attack and Defense stats.

However, a big part of RPGs is leveling up, isn't it? Over the course of the game, your characters will get stronger and their stats will get bigger. This means you also have to consider how your damage formulas will <i>scale</i> at higher values.

Let's level up the characters in our example a bunch. A now has 50 attack and is fighting a monster with 50 Defense. What does the damage look like now?

With my formula, it's the same:

<div class="formula">40 + (10 - 10) = 40 DMG</div>
<div class="formula">40 + (50 - 50) = 40 DMG</div>
But now look at RPG Maker's formula:

<div class="formula">10*4 - 10*2 = 20 DMG</div>
<div class="formula">50*4 - 50*2 = <b>100 DMG</b></div>
That's five times as much damage as before, even though the difference between stats is still the same! What happened? Scaling. Attack gets multiplied by a value of 4, while Defense only gets multiplied by a value of 2. That means that every point of Attack will count twice as much as every point of Defense. Even if the two stats are the same, bigger numbers will lead to a bigger result. You can still make this balanced, but you will need to increase HP as well to compensate for the higher average damage.

This is actually likely what you want! Most RPGs make everything get bigger over time, including HP and damage values. That's a big part of the fun for most people: bigger numbers make the player feel like they're progressing and getting more powerful. If they get bigger stats and the end result still looks the same, they might be disappointed. RPG Maker assumes you plan to scale everything up over time, and makes its formula account for that.

<i>Bonfire</i> is a rare RPG that doesn't work this way. Nobody's HP changes as the game progresses, so damage values are meant to stay relatively constant. <i>Cartoon Battle</i> doesn't have progression mechanics at all, so I opted for the more intuitive <i>Bonfire</i>-style formula. An equal-scaling formula is better if you want your RPG to focus on a small number of tactical battles that don't scale up over time.

Note that these features aren't mutually exclusive! You can absolutely combine constants and variable weights. Something like...

<div class="formula">DMG = 40 + (a.atk * 4 - b.def * 2)</div>
...is also a valid option, and in fact that exact formula is used by RPG Maker as well, for something special we'll discuss later.

<h3 id="dmgform.damper">Damping</h3>
If you're afraid scaling might make damage values change too much too fast, you can add a <b>damper</b> to your formula. This is a value between 0 and 1 you can apply to your stat terms to make them scale at a slower rate. This might look like:

<div class="formula">DMG = C + D * (a.atk - b.def)</div>
To use a real example, <i>Bonfire</i> uses a damper of 0.6, so its complete formula looks like this:

<div class="formula">DMG = 20 + 0.6 * (a.atk - b.def)</div>
This means a character's Attack or Defense stats will need to change by 1.7 to change the final damage by 1 point. This will make stats have a smaller impact over time and/or compared to the constant value. You may want to do this if you want numbers to creep upward at a slower rate, or if you want stat modifiers (such as from equipment or status effects) to have less of an effect. As discussed in the next section, small changes in stats can have huge effects if you aren't careful!

In a <a class="noExternal" href="#dmgform.defenses">divisive defense system</a>, you would use a power instead, such as:

<div class="formula">DMG = (a.atk/b.def) ** 0.6</div>
(Note that the {{{**}}} operator is not compatible with all browsers. For greater reliability, use the {{{Math.pow()}}} function.)

Be careful with this, though -- powers can lead to unpredictable results at extreme ranges! I don't recommend using large or small powers unless you want huge damage variance.

You can also change the damper to an amplifier by giving it a value greater than 1, if you want to make your formula more volatile instead.

<h3 id="dmgform.defenses">Subtractive vs. Divisive Defense</h3>
So far we've been looking at what happens when everyone's stats are equal. But what if they're different? You might want a character who's a heavy hitter, or an enemy who's designed to be easily defeated. Let's look at what happens when it's 20 Attack vs. 10 Defense, using RPG Maker's formula:

<div class="formula">20 * 4 - 10 * 2 = 60 DMG</div>
Woah! We only doubled the Attack value, but that came out to <b>three times</b> as much damage! What happened here?

The answer is that we used <b>subtractive defense</b>. When damage is based on an absolute difference between stats, small changes can have big effects, and the end result is highly dependent on characters' stats. To simplify things a bit, let's assume we're using a simple {{{a.atk - b.def}}} formula. When a.atk is 11 and b.def is 10, that's 1 damage. When a.atk is 12, that's 2 damage. Even though the stat changed by a mere 1 point, the damage was doubled. A small change now lets you beat the enemy twice as fast.

With large variance between character's stats, such as you often see in RPGs with specialized roles, this can get out of control really fast. Against an enemy with high defense, weak or even average characters might be nearly useless while strong characters are barely affected.

Subtractive formulas are well-suited to games where stat differences are very important, and strategy will depend heavily on things that affect that, such as equipment or status effects. Players will need to pay close attention to every character's capabilities, and match up strong attackers to strong defenders in order to progress at all.

Subtractive formulas tend to be relatively unintuitive. The same change in stats isn't reflected with the same change in the final result, and players can flounder helplessly against high-defense enemies if they don't know what they're doing. It asks more of your players and requires them to engage deeply with the mechanics and mathematics.

This may be the design philosophy you want; it was when I made <i>Cartoon Battle</i>, which is why this was the formula I used. But what if you want something a bit easier for the player to understand?

In that case, you want <b>divisive defense</b>. This takes the form {{{DMG = a.atk/b.def}}}. Under this system, stat changes are reflected intuitively: doubling Attack will always double your damage, and doubling Defense will always halve your damage.

Like with subtractive formulas, you can combine this with constants and weights, such as:

<div class="formula">DMG = C + D * [(W * a.atk)/b.def]</div>
Though this formula is more intuitive for the player, it's unfortunately trickier to design, and requires additional knowledge of mathematics and algebra. Note that Defense can never be 0 with this formula: if it is, you will get a division by zero error! Similarly, a negative Defense value will just turn damage negative and mess up the whole formula, unlike the intuitive result it generates with subtractive defense. (I recommend thinking of some way to make negative Defense act as a multiplier instead of a divisor if you want to preserve that functionality.) You will need handlers for these special cases, or careful checks to ensure they never appear.

One divisive formula that scales relatively well is:

<div class="formula">DMG = 4 * a.atk ^ 2 / (a.atk + b.def)</div>
As always, you can also combine these principles to create a formula with both a subtractive and divisive term.

A more detailed discussion of the pros and cons can be found on the RPG Maker community forums <a href="https://rpgmaker.net/forums/topics/14545/?post=635978#post635978">here</a>. The example divisive formula is taken from there.

<h3 id="dmgform.special">Special Attacks and Weighting</h3>
The game won't be terribly interesting if all you can use are regular attacks, right? Most RPGs have special skills that do more damage than usual. This means you're going to need different formulas for those.

<h4 id="dmgform.special.1">Lumped Weighting</h4>
The simplest method is to just multiply the whole formula by a weight value, like so:

<div class="formula">DMG = [20 + 0.4 * (a.atk - b.def)] * W</div>
<div class="formula">DMG = (4 * a.atk - 2 * b.def) * W</div>
<i>Bonfire</i> uses this method. This is probably the most intuitive option: if you want a special attack to do more or less damage, it'll be scaled by the exact amount you want in all situations; the skill will behave fundamentally the same as a regular attack, as the scaling factor doesn't interact with any stats directly.

<h4 id="dmgform.special.2">Specific Weighting</h4>
However, predictability can be boring. Maybe you want an attack to behave differently in different sitations. Let's look at what happens if you apply the weight to a term within the equation, rather than over the whole thing:

<div class="formula">DMG = W * a.atk - b.def</div>
Using RPG Maker's formula as an example, let's make a skill that behaves like {{{5 * a.atk - 2 * b.def}}}. With 10 Attack and 10 Defense, that's {{{50 - 20 = 30}}}, a 50% improvement over the basic attack damage of 20. In other words, that's the same effect as if we had applied a weight of 1.5. This remains constant across scale-up, provided there remains no difference between the Attack and Defense values.

However, let's test this with 10 Attack and 5 Defense. The basic attack would do {{{40 - 10 =}}} 30 damage, and the special attack would do {{{50 - 10 =}}} 40 damage. Now the improvement is 33%, not 50%.

What if we go in the opposite direction, 10 Attack vs. 15 Defense? The basic attack does {{{40 - 30 =}}} 10 damage, and the special attack does {{{50 - 30 =}}} 20 damage, a 100% increase!

The effectiveness of special attacks weighted through this method, like everything in a subtractive system, is heavily dependent on the difference in stats. A special attack will yield a greater effect against a tough opponent than a weak one. This isn't very intuitive mathematically, but it is logically: against an armored foe, you can break through using a stronger attack.

This method is good if you want a battle system based around the use of the correct skills. It turns battles into a puzzle of sorts: the same skill has varying usefulness in different situations, and the challenge can be in figuring out which skills to use when. This is the design principle I wanted for <i>Cartoon Battle</i>, which is why I used this method.

(Note that my formula weights the constant and the attack value as a lumped term. I recommend doing this if you use a constant; I initially tried weighting the attack value only, but the constant ended up dominating the equation and making all attacks very similar.)

<h4 id="dmgform.special.3">Adding Constants</h4>
So far I've only mentioned multiplication, but we're forgetting something even simpler: addition! Just add an extra constant to the attack, and it'll be stronger by that exact amount, no extra fuss needed. RPG Maker uses this method for its default magic formula, which looks like this:

<div class="formula">DMG = 150 + 2 * a.mat - 2 * b.mdf</div>
If you use a scaling formula like RPG Maker's, the constant will gradually become less impressive over time as the damage from the typical attack increases. This method is therefore ideal for a skill you only want to be useful for a certain period of time, perhaps to help the player at the beginning before you force them to transition to other tactics.

<h4 id="dmgform.special.4">Skill Progression</h4>
Actually, RPG Maker in particular uses another trick to ensure constant-type skills become obsolete. Let's take a closer look at that formula:

<div class="formula">DMG = 150 + 2 * a.mat - 2 * b.mdf</div>
Notice something different? The constant isn't the only thing that changed: the weight on the attacking stat changed too. Every point of Magic Attack only adds 2 points of damage, while regular attacks get 4 points of damage for every point of Attack.

Let's look at how that scales. With offensive stats at 20 vs. defensive stats at 10:

<div class="formula">PHYSICAL: 80 - 20 = 60</div>
<div class="formula">MAGICAL: 150 + 40 - 20 = 170</div>
Wow -- that's nearly three times as much damage! That magic spell's going to look pretty awesome to a player with those stats. But let's say they gain a few levels, and now it's 65 vs. 55:

<div class="formula">PHYSICAL: 260 - 110 = 150</div>
<div class="formula">MAGICAL: 150 + 130 - 110 = 170</div>
Now it's not looking so great -- still better than a regular attack, but only by a little. Let's level them up some more, so now they're at 100 vs. 90:

<div class="formula">PHYSICAL: 400 - 180 = 220</div>
<div class="formula">MAGICAL: 150 + 200 - 180 = 170</div>
Now the regular attack is actually <i>stronger</i> than the spell! In fact, the spell hasn't improved <i>at all</i> -- it's just as strong as it was at the beginning! What gives?

The key is that the scaling factor was changed, so that Magic Attack was now on equal footing with Magic Defense. In the regular damage formula, more Attack means more damage even if the difference between offense and defense doesn't change. If the same scaling was used, magic would always be that much stronger than the regular attack; but with the scaling factor cut, wizards have to work twice as hard to keep up with fighters.

This may sound terribly unfair, but a lot of RPGs use it. You may have noticed yourself if you've played a lot of RPGs that magic-users seem to get less impressive as time goes on. That's because in most RPGs, you're not intended to use the same spell you get at the beginning all the way through to the end. Instead of getting stronger by improving their stats, wizards are intended to get stronger by getting better spells. Just when the Fire 1 spell is falling behind, give your wizards Fire 2, the same spell but with a bigger constant, and they'll be back on top.

It's a difficult balance, though, and a lot of games miss the mark. You often run into issues at the endgame, where you run out of new skills but keep getting stat boosts. Is the last tier of magic good enough to keep casters competitive? Even if you can keep them on par with fighters, if casters need to spend resources like MP and fighters don't, fighters may still come out on top. But you don't want to overdo it and make the final spells so strong they make stats meaningless, either.

Personally, I'm not a big fan of this method. Just about the only RPG I felt accomplished it adequately was <i><a href="http://site.scfworks.com/?page_id=8" target="_blank">Last Scenario</a></i>, itself an RPG Maker game.

You may notice I didn't bother adding magic stats in the default engine at all. I, personally, don't actually see the point in a split; most RPGs nowadays give special attacks to fighters too, and once you do that there's not really a functional difference. As will be discussed later, I think there are better ways of making mages tactically distinct from fighters.

<h3 id="dmgform.htk">HP and hit-to-kill ratios</h3>
Damage is only one half of the equation. How do you balance HP along with it?

As you approach this question, you may be missing the forest for the trees. The exact numbers don't really matter; they can be basically anything. Observe:

<div style="display:flex; width:auto; align-items:center; justify-content:space-evenly">[img[setup.ImagePath + "documentation/HP_PaperMario.PNG"]][img[setup.ImagePath + "documentation/HP_DragonQuest.PNG"]][img[setup.ImagePath + "documentation/HP_FinalFantasy.PNG"]]</div>
RPGs can have wildly varying HP values. These screenshots (from <i>Paper Mario</i>, <i>Dragon Quest V</i>, and <i>Final Fantasy VII</i>, respectively) show a variance of over a hundredfold across three different examples -- yet all of them are critically acclaimed, well-balanced games. How is this possible, and how should you choose your own HP values?

The answer is to look not at the HP values themselves, but <i>the number of attacks it takes to defeat a character</i>, or <b>hit-to-kill ratio</b>. This is an extension of a general principle of game design: Ratio of action to response. How many times does a player have to perform a certain action before they achieve a desired outcome? This is the truly basic unit of game design, and it is a crucial one. Too low and the game may be too easy, too high and the player might get bored and frustrated by feeling that their actions accomplish nothing.

HP and damage design are therefore two sides of the same coin. Let us revisit our three examples, but look for <i>damage</i> values instead:

<div style="display:flex; width:auto; align-items:center; justify-content:space-evenly">[img[setup.ImagePath + "documentation/DMG_PaperMario.PNG"]][img[setup.ImagePath + "documentation/DMG_DragonQuest.PNG"]][img[setup.ImagePath + "documentation/DMG_FinalFantasy.PNG"]]</div>
That 7000 HP might look like a lot, but at 2800 damage per attack, you'll be down in only three hits! Mario, despite his paltry 20 HP, can actually take an additional hit if the average attack does 5 damage. <i>Dragon Quest</i>'s 88 damage would be overkill against Mario and insignificant against a <i>Final Fantasy VII</i> character, but provides a reasonable hit-to-kill ratio of 4 in its native setting.

This is the measure that you should consider when designing player characters and enemies. I would recommend starting with a general scale for either HP or damage -- what do you want the average attack damage to be, or the average starting HP? -- and then fill the other based on your desired hit-to-kill ratio. <a href="https://rpgmaker.net/forums/topics/11883/?post=414635#post414635" target="_blank">RPG developer Craze recommends a HTK of 8-12 for player characters</a>, with lower numbers obviously resulting in a more defensive/healing-heavy strategy. To make it easier, you may choose to remove the issue of scaling through a damage formula such as <i>Bonfire</i>'s and keep HP constant throughout the game. In <i>Bonfire</i>, for example, all player characters are fixed at 100 HP, with enemies classed into clear "tiers" that each share an HP value.

Notably, I did <i>not</i> do this math for <i>Cartoon Battle</i>, which is what resulted in battles being too slow to begin with. I initially gave characters ten times the HP of <i>Bonfire</i> but only twice the damage, which of course resulted in hit-to-kill ratios that were far too high and just made battles a slog. Learn from my mistake! Plan out how long you want battles to be and how durable you want characters to be, and make sure your numbers align with your desired results.

Note that all of this interacts with <a class="noExternal" href="#abilities.heal">healing</a> and [[stat growth|Additional Features]] as well. You may balance the numbers well for one snapshot of gameplay, but can you maintain it through the whole course of the game?

<h3 id="dmgform.random">Randomness and Variance</h3>
Predictability can be boring. Sometimes, you want a little randomness in attack outcomes.

This isn't really my wheelhouse, but you can read about how to do this in the documentation for JavaScript's {{{Math.random()}}} function: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random

See also the "Misses and Critical Hits" section of [[Additional Features]].

<h3 id="dmgform.exta">Additional Reading</h3>
It's also possible to use other variables, such as level, as factors in damage formulas. Check out <a href="https://bulbapedia.bulbagarden.net/wiki/Damage#Damage_calculation"><i>Pokemon</i>'s damage formula</a> if you'd like to see one that's really complex! For more resources, an RPG Maker community thread with more technical explanations on how to make more complex formulas can be found <a href="https://rpgmakermv.co/threads/damage-formulas-101-mv-edition.2172/" target="_blank">here</a>.

<h2 id="abilities">Designing Abilities</h2>
An RPG is boring if you can only do one thing. You should think about what options you want to give the player. I'm not just talking about different kinds of damage formulas, anymore. The sky's the limit, here. Does that seem overwhelming? Let's go over some basic design principles to ground you a little.

<h3 id="abilities.basic">Before you begin, what are your regular commands?</h3>
[img[setup.ImagePath + "documentation/command_example.JPG"]]

If you've played any RPG before, chances are you're familiar with having these four options in battle: ATTACK, MAGIC, DEFEND, ITEM. Some games add or subtract a few commands, but this is the basic setup used by RPG Maker, <i>Dragon Quest</i>, <i>Final Fantasy</i>, and many others. The above image is from <i>Dragon Quest VI</i>.

Before we design abilities, we're going to need to break apart this fundamental model -- because, contrary to popular belief, it's not the only one you can use! It's not the model used by the default engine, and I'll explain why.

First, notice how all of these actions have a positive effect. The player will accomplish <i>something</i> during their turn. Even DEFEND, commonly seen as a "skip turn" option, helps protect the character against the next attack.

If you've played <i>Cartoon Battle</i>, I hope you learned not to take that for granted! I replaced it with an action that really does do nothing. This wasn't just because I wanted to make things harder for the player, but because I wanted to turn defending into a special role. Only Fighter can defend themselves and others. By limiting the player's options in this way, I hoped to make them take notice of it, and learn how to use it tactically.

The second thing to notice here is that ATTACK and MAGIC are separate. Why is that, exactly? MAGIC includes the ability to inflict damage. Could we not lump them together? The distinction is typically that attacking is always free while magic requires the use of a resource, but this isn't always the case. There are RPGs that make even regular attacks consume resources, and have special skills that are free.

There are really two main reasons for this distinction, one historical and one practical. Early computer RPGs were inspired by <i>Dungeons & Dragons</i> and similar tabletop RPGs, where not every character had access to magic; under the rules, magic was a solidly distinct action from regular attacks. It's mostly fallen out of favor as a design practice now, but this principle carried over into many early computer RPGs, where certain classes or characters couldn't use magic at all.

The other reason is that the player always needs a means to advance the game, and that means inflicting damage. Characters could run out of spells or have their magic disabled, so splitting ATTACK off entirely was an easy way to ensure the player always, in theory, had a means of completing the battle. (There is also, as touched upon in <a class="noExternal" href="#dmgform.special.4">the damage formula section</a>, the matter of different stats being used for magic; though this distinction has been almost completely lost in modern times, as physical skills are commonplace in RPGs now.)

But oh, why should we be so generous? What if we want to be really mean and give the player no free rides? There's nothing requiring you to make a basic attack a guarantee. You can, if you really want to, force the player to interact with the game through skills alone.

This is what I did in <i>Cartoon Battle</i>: I folded ATTACK into MAGIC to create the ACT command. Every character does still have a "basic attack" of sorts, but by doing it this way I got to personalize it for each character, and give them all subtly different behaviors. I believe this leads to a richer design, with more options for the player and personality for the characters. It also makes it possible for the player to be unable to attack at all if they mismanage their resources, creating a more punishing environment that encourages planning and forethought.

This is key, though, and something to be discussed later: I didn't make actions consume nonrenewable resources. Energy for actions continually regenerates, so even if the player can get themselves into a sticky situation, they can't ever get into a state where the battle is totally unwinnable.

There are cases when it makes sense for ATTACK to be separate, such as if skills consume limited resources and/or players are not meant to use them often. But I encourage you to think about what purpose you want to use it for, and if it's better off folded into general actions.

ITEM could theoretically be folded into ACT too, if we really want to compact this. But generally, there are reasons to keep it separate, as in most RPGs items do behave significantly different than skills. You could always just not feature items at all, too, if they're too much of a hassle.

So: when desigining abilities, first free yourself of assumptions. Think about what your player's most basic options are going to be, and what functionalities you want to make an ability or a regular command.

<h3 id="abilities.resources">Resources and Game Balance</h3>
Typically, there's some reason why players can't just use their best abilities all the time. If they could win every battle by just using the same ability over and over, that wouldn't make for a very interesting game. Most games implement a number of ways of restricting the use of special abilities, often by tying them to some kind of resource. We'll discuss a few of the more common methods below.

<h4 id="abilities.resources.mana">Mana Points (Limited Resource)</h4>
This is probably the one you're most familiar with: special abilities consume a limited resource, typically one that's not easy to restore. This most commonly takes the form of MP, or Mana/Magic/Moxie/whatever Points. Skills consume MP, which can be restored by resting, often available only in certain locations. Like many RPG mechanics, this is a holdover from <i>Dungeons & Dragons</i>, which had an even more literal system: wizards had a fixed number of spells they could cast per day. (The very first <i>Final Fantasy</i> actually used this system! MP did not become commonplace until around the Super Nintendo era.)

The idea behind this system is <i><b>resource management</b></i>. You enter a dungeon with a certain number of spells, and you have to figure out how to use them appropriately as you progress. You could use up all your MP to quickly dispatch your first encounter, but that could leave you helpless against the next one. The player is encouraged to think ahead and use their skills efficiently so as not to waste MP.

Unfortunately, this design principle has been rather forgotten in modern times, to the point that later games like <i>Final Fantasy XIII</i> eschew MP entirely. Most RPGs are now designed as a series of tactical set piece battles, with regular encounters being little more than filler before the boss fight. You know that full heal you always get right before the boss? You're not supposed to get that! <i>Dungeons & Dragons</i> and the early <i>Final Fantasies</i> threw you into boss fights in whatever state the dungeon had left you, which meant every battle mattered in terms of managing your resources. To make matters worse, most RPGs have items that can restore MP, so even if you do run out all you need to do is pop one of your zillion Ethers and you can go right back to slinging spells. This all makes MP virtually meaningless: you're free to trivialize normal fights with strong skills, and even in long battles where you may run out of MP, it'll only take one turn for you to get back on track.

Now, there's nothing wrong with focusing on tactical set pieces over strategical resource management. Some games eliminate resource management entirely by making sure you go into every battle at full strength. However, you should consider that if you do want your game to be more tactical, MP might not be the best system to use.

In sum: MP is best for games based on strategic, long-term resource management. To get the most out of it, you probably shouldn't give players enough that they can use skills all the time, or make it easy to restore. Perhaps consider removing the possibility of in-battle MP restores?

Implementing this system is quite easy: just add an {{{mp}}} attribute to the "Actor" or "Puppet" class in the story JavaScript, or use the current {{{en}}} attribute and change the battle coding to make it behave like a limited resource.

Some examples of games that use this system well (external links):
<ul>
<li><i><a href="https://rpgmaker.net/games/5751/" target="_blank">Soul Sunder</a></i>, a survival horror RPG where even regular attacks consume MP</li>
<li><i><a href="https://rpgmaker.net/games/5904/" target="_blank">Czarina Must Die</a></i>, which has no in-battle restores</li>
<li><i><a href="https://en.wikipedia.org/wiki/Shin_Megami_Tensei:_Devil_Survivor" target="_blank">Shin Megami Tensei: Devil Survivor</a></i>, which gives players very limited MP but makes magic an integral part of the battle system</li>
<li>Though it's not an RPG, the first <i><a href="https://en.wikipedia.org/wiki/Resident_Evil_(1996_video_game)" target="_blank">Resident Evil</a></i> and other survival horror games can give you a good idea of what resource management gameplay looks like.</li>
<li>It may also be instructive to check out the core rulebooks for different editions of <i><a href="https://en.wikipedia.org/wiki/Editions_of_Dungeons_%26_Dragons" target="_blank">Dungeons & Dragons</a></i>. Later editions are often accused of being too much like video games, which is actually good for your purposes! However, the earlier editions (1-3) are the ones with greater focus on resource management and long-term strategy. 1st edition <i>D&D</i> was also the primary inspiration for the original jRPGs <i>Dragon Quest</i> and <i>Final Fantasy</i>, so many design philosophies that are now baked into the genre have their start there.</li>
</ul>
<h4 id="abilities.resources.sta">Stamina (Renewable Resource)</h4>
Some RPGs that prefer a more tactical focus use this system instead: a more limited, controllable resource that changes as the battle progresses.

The simplest form is a resource that regenerates automatically over time. <i>Cartoon Battle</i> uses this system: you gain enough Energy points to use a basic attack every round, but to use a more advanced ability you will need to save up. This system is more intuitive and elastic than MP; it is easier to plan out how to allocate your resources, and you're never trapped in a situation where you're simply out of options, at least not for long.

There are variations within this system that can have significant effects. How many points to you give the player to start with, and how many do you give them per turn? If you top everyone off before a battle but make them regenerate slowly, you can create a similar system to MP or <a href="abilities.resources.cd">cooldown</a> where players can use strong abilities early but have to wait a while before they can use them again. What is the maximum amount they can hold? A low maximum encourages players to use their points quickly to avoid wasting regeneration, while a high maximum may encourage hoarding and more conservative play. Maybe you don't want a maximum at all? Does everyone operate on the same rules, or does everyone have a different flow? I encourage you to play around with these parameters and see how they change the feel of the game.

Alternatively, you can make players work for their energy generation. Often, this is a very good way to encourage players to play the game the way you want them to. If you want battles to be fast-paced and reward offense, make regular attacks generate energy and players will be rewarded for playing that way. If you want a more cerebral experience, maybe defending or smart play, such as hitting weaknesses, will do it.

You can complicate this even further by adding multiple resource pools and making them interact! Maybe you have traditional MP, regenerating stamina, and manually generated energy points all at the same time. Maybe you can expend one pool to refresh another? It'll be complicated, but it can lead to great fun and tactical depth if you can pull it off.

Some games also make energy a group resource, rather than each character having their own separate pool. This can create more tactical depth, with certain characters who can act as "batteries" for the whole group, but asks a lot more of the player -- if they don't know what they're doing, they can incapacitate the whole group, not just a single character!

In sum: Renewable resources are best for games with a focus on intense individual fights. This system tends to be more intuitive for the player and easier for the designer to balance, so I recommend starting with it. It's very modular, and you can adjust a lot of the variables to create a different experience.

Some examples of games that use this system well (external links):
<ul>
<li><i><a href="https://rpgmaker.net/games/272/" target="_blank">Alter A.I.L.A. Genesis</a></i>, which was a major inspiration for <i>Cartoon Battle</i>; you will notice a lot of similarities. It's much more complicated, though, with a manual generation pool on top of renewable energy, and special equipment that can change the rules.</li>
<li>"Limit Break" abilities, popularized by <i><a href="https://en.wikipedia.org/wiki/Final_Fantasy_VII" target="_blank">Final Fantasy VII</a></i>, are an example of abilities tied to a manually-generated resource</li>
<li><i><a href="https://rpgmaker.net/games/4526/" target="_blank">Wine & Roses</a></i></li>
<li><i><a href="https://en.wikipedia.org/wiki/Steven_Universe:_Attack_the_Light!" target="_blank">Steven Universe: Attack the Light</a></i> is an example of a group resource for actions</li>
<li><i><a href="https://rpgmaker.net/games/3937/" target="_blank">Obelisk: Devilkiller</a></i> features both group and individual resources</li>
<li><i><a href="https://rpgmaker.net/games/7969/" target="_blank">Prayer of the Faithless</a></i> is an interesting example of a game that uses this system and still manages to be resource management. The developer's blog posts are also very instructive in terms of game design.</li>
</ul>
<h3 id="abilities.resources.cd">Cooldown</h3>
Cooldown is a feature that makes the player wait a certain number of turns before they can use a skill again. Cooldown may be tied to skill use itself, or more commonly, each individual skill has its own cooldown.

This is a much more literalized method of skill throttling: if you only want players to use a skill every X turns, you can just make it so, with no further balance testing needed. This has similar advantages to a renewable-resource system, in that it is intuitive for the player and easier to design. It provides similar tactical depth by forcing the player to think ahead so as not to box themselves into a corner.

This method may be combined with any of the others. In particular, it's a good way to mitigate the problems of a limited-resource system in a tactical setting, by preventing players from just using their strongest attacks constantly. You can include other twists too, like things that add or reduce cooldowns.

Personally, I do not like this system; I feel it is too literal and restrictive, and I feel obligated to use high-cooldown skills as often as possible. I prefer the flexibility of a renewable-resource system. However, this system is gaining popularity, and you and your players may feel differently!

In sum: Cooldown has many of the same advantages as a renewable-resource system, but it is simpler and more straightforward, with the pros and cons that implies. It is recommended for novice developers, as it is easy to implement and balance. It is highly compatible with other systems if you want to add more complexity.

This system is already implemented in the default system for enemies. To implement this for the player, you can add the same attribute to the "Puppet" class or to individual actions.

Some examples of games that use this system well (external links):
<ul>
<li><i><a href="https://store.steampowered.com/app/706560/Jimmy_and_the_Pulsating_Mass/" target="_blank">Jimmy and the Pulsating Mass</a></i> (warning: horror game) combines this with a limited-resource system</li>
<li><i><a href="https://rpgmaker.net/games/3937/" target="_blank">Obelisk: Devilkiller</a></i> combines this with a renewable-resource system</li>
</ul>
<h3 id="abilities.resources.recoil">Recoil/Blowback</h3>
Instead of tying skills to a specific resource, you can also limit them by having them affect <i>other</i> resources, such as a character's health and stats. Maybe a reckless attack leaves a character injured, or using dark magic saps their strength. This can create a similar situation to limited-resource systems where the player can go into a fight guns blazing, but recoil is far more punishing of reckless behavior. Exhausting your resources in this system doesn't just lock off your abilities, it can make your characters completely helpless.

Done well, this system can create probably the most tactical and strategical depth of all these systems, forcing the player to make tradeoffs on multiple axes with every action. However, it is very difficult to implement and balance correctly. You have to keep track of not just one resource but several, and ones that interact with the rest of the battle system as well.

As always, you can merge this with other systems as well, possibly only implementing it for a few skills. I did this in <i>Cartoon Battle</i>, where Mage's Sacrifice skill consumes HP, and Fighter's Bull Rush skill self-inflicts a negative effect.

In sum: This system can work with both tactical games and resource management games, but is very complicated. It will take the player some getting used to, and it will be even harder to design fairly. If you want to use this, try easing your way into it by merging it with other systems.

This is the most difficult system to implement: unless you want a consistent theme like all skills consuming HP, you'll have to incorporate unique behavior into every skill.

Some examples of games that use this system well (external links):
<ul>
<li><i><a href="https://en.wikipedia.org/wiki/Pok%C3%A9mon_(video_game_series)" target="_blank">Pokemon</a></i> has moves that inflict recoil damage, and most of the strongest attacks self-inflict debuffs to discourage continuous use</li>
<li>Physical skills in the <i><a href="https://en.wikipedia.org/wiki/Shin_Megami_Tensei" target="_blank">Shin Megami Tensei</a></i> series consume HP rather than MP</li>
<li><i><a href="https://rpgmaker.net/games/7969/" target="_blank">Prayer of the Faithless</a></i> combines this with a renewable resource system, as your stamina is also your defense</li>
<li><i><a href="https://en.wikipedia.org/wiki/Live_A_Live" target="_blank">Live-A-Live</a></i> is a rare example of a version that uses no other skill limitations</li>
</ul>
<h3 id="abilities.elements">Elemental Effects</h3>
If you've played any RPG, chances are you've run into elemental type matchups. You get a bonus if you use fire magic on the ice monster and ice magic on the fire monster, that sort of thing. Sometimes you'll see different flavors, like crushing attacks being more effective against armored foes or a hunter character getting a bonus against certain types of monsters. This is a nice way to diversify your player's options, instead of just giving them one skill that does more damage in all situations.

There's a reason I didn't include this in <i>Cartoon Battle</i>, though: I personally don't feel like it adds very much. In most RPGs, there is no difference in each elemental spell other than the element, so whether you're attacking with Fireball or Ice Bolt creates no change in tactics; you're still just using "the attack that does more damage". If you plan to use elemental effects, I encourage you to add more personality to each one. Maybe fire spells are the only ones that can hit multiple targets at once? Maybe lightning spells are stronger, but cost more? Alternatively, you can go in the reverse direction, and give elements to personalities. If you restrict certain elements to specific characters, you can use elemental affinities to create tactical depth. Say the healer is the only character who can use the element a certain enemy is weak to? That's going to force you to make tactical trade-offs, and fight differently than you would otherwise.

And this is more a writing tip than a game design one, but I encourage you to break out of the standard mold of the Classical elements or the fire/ice/lightning trifecta. These are <i>elements</i>; fundamental components of your world and everything in it. They should inform the story and atmosphere of your game. <i>Why</i> is everything made of fire, water, wind, and earth? What does that <i>mean?</i> Are your different elemental forms for monsters functionally identical except for the different hat? Why on Earth are you doing that when you could be making enemies that are actually meaningfully diverse and tell the player something interesting about your setting?

If you're making something a core gameplay feature, it should tie into your story too. I purposefully encourage this with the vagueness of the default "elements" in the engine -- it's easy to map the colors onto the standard fire/ice/lightning/dark/holy set, but as I say in the Artist's attack descriptions, you can interpret them many different ways. Mabel isn't weak to Blue because she's bad with cold; she's weak to Blue because she's bad at dealing with heavy and negative emotions, which is what I choose to interpret Blue as representing. Think hard about what elements you choose to use in your game and how you can use them to inform the story and characters, not just add depth to the gameplay.
<ul>
<li>In <i><a href="https://rpgmaker.net/games/3554/" target="_blank">Star-Stealing Prince</a></i>, every character uses a different element. Each character has a distinct role, so enemies' weaknesses change the overall group synergy by encouraging different characters towards offense.</li>
<li><i><a href="https://rpgmaker.net/games/3937/" target="_blank">Obelisk: Devilkiller</a></i> may be an example of going too far: it's widely criticized for the major power gap between Solar and Lunar attacks, making Solar-resistant enemies take far longer to beat for no real purpose.</li>
<li>The <i><a href="https://en.wikipedia.org/wiki/Shin_Megami_Tensei" target="_blank">Shin Megami Tensei</a></i> series strongly rewards correct elemental matchups with its mechanics, and encourages a diverse loadout due to limited skill slots and enemies with diverse resistances, including to physical attacks.</li>
<li>Though it's not notable from a gameplay perspective, <i>OFF</i> features some truly bizarre element choices: Smoke, meat, metal, and plastic. This supports the game's overall surrealist atmosphere and the strangeness of its world.</li>
</ul>
<h3 id="abilities.heal">Healing</h3>
So far we've mainly talked about offensive abilities, but what about healing? If you've played RPGs, you're probably familiar with certain characters having this role; the cleric in <i>Dungeons & Dragons</i>, the white mage in <i>Final Fantasy</i>, and so on.

You may be surprised to learn this is actually a controversial topic in the indie designer scene! There's a school of thought positing that healing skills rob the game of tactical depth, because they prevent actions from having permanent consequences. If the player can just keep healing indefinitely until they win, this encourages players to fall into a rut of "turtling", or playing very defensively and only chipping away at enemies. This can make battles very boring. On the flipside, there exists a tipping point where players will no longer be able to outheal an enemy's attacks, but it may not be clear to the player where this is, causing them to circle a drain of spending all their time healing and never having the breathing room to attack.

However, giving the player a chance to bounce back from their mistakes may be a good thing. If you give players a lot of HP but no healing, they may be doomed by early mistakes but not realize it until the end of the battle; they must manage their resources carefully every step of the way. It can be asking a lot of your players to make them think that far ahead!

A middle ground exists with revival skills. If there is no possibility of in-battle revival, players can recover from some of their mistakes but not all: if they mess up too badly and let characters get KO'd, they're punished with an inability to reverse it. If you still find that too punishing, revival skills themselves are separate balance. Do you want HP hitting 0 to be a meaningfully distinct scenario from HP hitting 1? If so, you probably shouldn't let revival skills recover as much as healing skills. If it's possible to revive a character to full health every turn, then death hath lost its sting, no? You may as well let normal healing skills revive people -- and that is, itself, a valid option used by some RPGs.

It must also be said: there is some visceral satisfaction in seeing a strong attack bring your party to its knees, even if intellectually you know you can reverse it on the next turn. Your game will lack this if the enemies are just chipping away at you at the same rate you're chipping away at them. An enemy ripping off 20% of your HP in a single attack can be even more significant than ripping off 80% if you can't get it back, but our gut reaction is still that it's less impressive.

Healing skills are a tricky balance to get right. Experiment with it, and see what other games have done. It's probably a better idea to tie healing to limited resources to avoid an endless turtling scenario, but it can work with renewable resources as well.

These games may be worth consideration (external links):
<ul>
<li><i><a href="https://rpgmaker.net/games/3937/" target="_blank">Obelisk: Devilkiller</a></i> combines healing with long cooldowns with the end result of slowing the pace of damage, but not actually reversing it</li>
<li><i><a href="https://store.steampowered.com/app/706560/Jimmy_and_the_Pulsating_Mass/" target="_blank">Jimmy and the Pulsating Mass</a></i> makes all healing skills proportional to max HP, so they are just as effective throughout the game</li>
<li><i><a href="https://rpgmaker.net/games/5751/" target="_blank">Soul Sunder</a></i> limits healing to items</li>
<li><i><a href="https://rpgmaker.net/games/3135/" target="_blank">Edifice</a></i> takes no healing to an extreme: there is no healing <i>outside</i> of battle, either</li>
</ul>
<h2 id="items">Item Design</h2>
Most RPGs feature items the player can accumulate over the course of the game. They often expand the player's options in some way by giving them additional resources.

Items can usually be classed into two categories: <b>Consumable</b> items are one-use items that produce immediate effects and disappear after use. Health potions and spell scrolls fall into this category. <b>Equipment</b> can be worn by characters to improve, or at least change, their capabilities. A steel sword, leather armor, and a ring of +2 Strength are all examples of this category.

<h3 id="items.consumable">Consumables</h3>
Consumable items can be thought of as a form of <a class="noExternal" href="#abilities.mana">limited-resource abilities</a>, and similar design principles apply. The main distinction is that their effects are (usually) independent of the characters' stats, so everyone can use items equally well and there are no soft limits on how many you can store at once. (But not always! Some systems allow different characters to carry more items, or increase the amount of items you can hold over the course of the game. It's also possible for items to mimic abilities complete with drawing on the relevant stats, or using their own stat entirely. <i>Cartoon Battle</i> does the latter.)

The important considerations here are how powerful you allow items to be (more powerful than regular abilities? Less?), how many you give the player (can everything be bought, or do you only get a fixed amount for the whole game and that's it?), and how many the player can store at once (can you only hold a certain number of different items? Can they stack?). If the player can go into battle with 99 full-heal potions in their back pocket, there's basically no way they can really lose. Some people enjoy the puzzle of managing limited inventory space, but some people find it a frustrating waste of time. And if items have uniquely powerful effects, that will skew gameplay in favor of item use; while if items are inferior to standard abilities, they may become irrelevant.

A major problem that tends to crop up with consumable items is <b>hoarding</b>. Even if you do run into a situation where you could really use that full-heal elixir, <i>what if I need it later?</i> Cue walking into the final boss fight with 99 elixirs and turning it into a cakewalk. You should try to this problem. There are a number of ways you can do so, but probably the easiest way is to set low caps for items. <i>Final Fantasy</i> and most RPG Maker systems let you store a dizzying 99 of each item, which is probably more than you can ever use. If you cap it at a much lower number, that will teach the player that they are supposed to be burning through their inventory space to make room for new items instead of hoarding.

A low item cap also helps with game balance, as it restricts the number of states a player can enter battles with. A player who enters a battle with 99 healing potions is going to have a much easier time than one who enters with 10 or none at all; it's really hard to balance that to give a challenging but surmountable experience to every player. A lower item cap means a smaller range of preparedness you need to account for. By default, the stock cap in Another RPG Engine is a relatively low <b>9</b>, but you can change it by editing the {{{ITEM_MAX}}} variable. You can even make stock caps unique for every item, such as allowing fewer copies of higher-level items compared to lower ones; some entries in the <i>Shin Megami Tensei</i> series do this.

It also helps to clearly communicate item scarcity to the player. A lot of items are hoarded because the player doesn't know when they'll get another one, if at all. Something like a rarity marker on items can help the player make more informed decisions. Or, even more directly, just pull back the curtain and show them the locations and drop rates of items in the world. (See the Bestiary in [[Additional Features]] for one way to implement this feature.)

You can also just eschew items entirely, of course, if you'd rather keep things simple.

For more on this topic, see the video "<a href="https://www.youtube.com/watch?v=HT-Z03YVBPI&list=PL8K0_g1wdQepKF0a8eh_4dhhivcSrSKyO&index=19" target="_blank">How Can I Stop Item Hoarding in Games?</a>" by Design Doc.

These games may be worth consideration (external links):
<ul>
<li><i><a href="http://site.scfworks.com/?page_id=8" target="_blank">Last Scenario</a></i> has its attack items correspond to spells, but you often get high-level attack items long before you get the corresponding spell, making them function as previews of later abilities. The intense difficulty of the boss fights also requires you to use all your resources to the fullest, including items.</li>
<li>In <i><a href="https://store.steampowered.com/app/706560/Jimmy_and_the_Pulsating_Mass/" target="_blank">Jimmy and the Pulsating Mass</a></i>, consumable items are almost never found outside of shops, and you can only carry 9 at a time. This means you will never take them for granted; they are a purposeful investment, and you cannot trivialize battles by stocking up on dozens of everything.</li>
<li><i><a href="https://rpgmaker.net/games/5751/" target="_blank">Soul Sunder</a></i> and its spiritual successor <i><a href="https://rpgmaker.net/games/7969/" target="_blank">Prayer of the Faithless</a></i> have largely item-based battle systems</li>
</ul>

<h3 id="items.equipment">Equipment</h3>
Equipment is a common feature in RPGs. Over the course of the game you obtain different weapons, armor, and other trinkets that improve your stats or confer other advantages. This adds tactical depth to the gameplay, as it provides a resource you can use to modify your characters, thus creating different set-ups for battle.

The most common way this manifests in RPGs is that equipment just provides better bonuses as the game goes on; your starting sword gives +1 Attack, the sword in the next town gives +3 Attack, the sword after that gives +5, etc. This creates a sort of secondary progression method alongside experience levels (discussed in [[Additional Features]]). Even if you have good base stats from leveling up, you will fall behind unless you update your equipment too.

I would generally recommend avoiding this model. I find it redundant with normal level up mechanics, and it provides no tactical depth: if every next item is objectively better than the last, you never have reason to do anything differently. You'll just add another thing you'll have to balance for, for no real benefit.

A better method is to think of equipment as providing <i>qualitative</i> changes rather than quantitative ones. Maybe a weapon inflicts a status effect, or deals extra damage to a specific type of creature. Maybe a piece of armor makes you take more physical damage, but grants you immunity to status effects. Maybe an accessory changes a healing spell into a destructive one, allowing your healer to play a different role. Ideally, the equipment you have at the start of the game should still be viable at the end, or at least most of the way through. This encourages the player to make evaluations and trade-offs over the course of the game instead of finding the one equipment loadout that's best in all situations. You can still have a "progression" of better equipment, generally by combining multiple effects, but the progression will be less uniform and absolute.

This is also not in any way a required feature for an RPG; don't feel bad if you don't want to use it.

<h2 id="effects">Status Effects</h2>
Status effects are things that modify the normal flow of battle. They may change stats, lock off certain abilities, or incapacitate characters entirely. They can affect the whole field, too, not just individuals! This is a great, and often crucial, way to add tactical depth to an RPG. Without status effects, turn-based RPGs are just damage-race number games, which is really boring! Status effects allow you to make strategical trade-offs and throw a wrench into established strategies, forcing the player to adapt and improvise. However, status effects are also one of the things players most often complain about. Careful planning and balance testing is necessary here.

For further reading, see the video <a href="https://www.youtube.com/watch?v=ThDVGP4UB30&list=PL8K0_g1wdQepKF0a8eh_4dhhivcSrSKyO&index=18" target="_blank">What's the Point of Status Effects?</a> by Design Doc.

<h3 id="effects.control">Hold Effects</h3>
Hold effects restrict what characters can do in battle. The one you're probably most familiar with is the "Silence" effect, which restricts the use of magic in several of the most popular jRPG franchises. The excellent indie horror RPG <i>Soul Sunder</i> takes a more visceral approach, with "arm injuries" locking physical techniques and "head injuries" locking magic. I would also classify effects that prevent you from acting at all under this label.

Hold effects are usually binary in their application -- you're either affected or you're not. This makes them very easy to design and implement.

However, balance is, as always, a concern. The power of these effects will depend a lot on the rest of the battle system. Is magic really crucial? Then locking that is going to incapacitate the player pretty badly. Can magic only be used by one character? Then Silence won't even matter to anyone but them! And magic's not the only thing you can lock -- you can disable items or even regular attacks.

This also interacts interestingly with status cures. If Silence locks spells, you can't use your status cure on yourself to fix it! This tends to lead to Silence cure items having higher value than others -- but you can always turn it around with an item-sealing Embargo effect that can only be cured by magic! Some designers, often indie ones who are likely just as sick of this as their players, will go easy on you and let status cure spells remain usable under skill locks. In <i>Cartoon Battle</i>, I took this route with Fighter's self-curing Meditate ability and Witch's Cleanse, but not with Mage's Restoration spell.

If you don't make cures easy, though, you have to be careful with how often you throw these out, especially total paralysis effects. If an enemy is paralyzing the whole party with every attack, the player can feel frustrated and powerless, forced to waste time watching their characters slowly die with nothing they can do about it. And if you include a paralysis effect that doesn't wear off naturally, that's effectively an instant kill attack. If only certain characters can cure it and they get hit, they're disabled for the rest of the fight. (If you played <i>Cartoon Battle</i>, you probably experienced this in the Bill Cipher fight, where petrification could only be cured by limited items if it struck your healers, Witch and Mage.) Maybe you want to be that hardcore, but if you don't, maybe pull it back a little.

One good way to keep hold effects manageable is to provide characters with a protection effect when they wear off, preventing them from being "stunlocked" continuously. I used this with <i>Cartoon Battle</i>'s "Alert" status, which is automatically applied after a stun and prevents future applications of "Stunned" until it wears off. I took this idea from <i>Jimmy and the Pulsating Mass</i>, which additionally makes the "Alert" status last longer after every stun, further discouraging its overuse.

<h3 id="effects.loss">Loss-of-control / Uncontrollable Effects</h3>
Loss-of-control effects are similar to hold effects, but different in their execution. They remove a player character from your control, and force them to act under an AI routine instead. Examples you may be familiar with are the "Berserk" and "Confusion" effects common to many RPGs.

While these effects don't prevent a character from acting <i>entirely</i>, they can still severely limit their abilities. Usually, these effects restrict a character to using only their basic attack ability, and you have no say in who they target, preventing you from effectively coordinating attacks. These effects may also compel the character to attack their <i>allies</i>, which is even worse than just preventing them from acting at all!

The default engine has support for these effects, but only in their most basic form: The affected character only uses their basic attack, and selects their target completely randomly. It is possible to generate a more sophisticated AI that can choose from multiple abilities -- for instance, maybe the character always chooses their strongest attacking ability with no regard for the cost, quickly exhausting their resources? But if you need to make unique logic for every character, that's going to be a lot of work. You can also implement more complex targeting logic, like the standard targeting logic for enemies.

Some games have these effects convey a tradeoff, providing additional advantages in exchange for the loss of control. For instance, the "Berserk" status provides an offense boost in some games. (In others, it doesn't -- it's just loss of control.) They also have interesting interactions with damage reflection, counters, and other features that require careful and judicious targeting. Under normal circumstances you may not find damage reflection too concerning, since you can just stop attacking if you get too hurt... but if the enemy inflicts a berserk effect, your characters will keep attacking with no regard for their own safety! These effects also have interesting combinations with other effects, such as debuffing a character's Attack before berserking them, or <i>buffing</i> their Attack before turning them on their allies. Get creative.

It should be noted that these <i>are</i> effectively hold effects, and the same cautionary notes apply. Don't use them too much, or players will feel powerless and frustrated.

<h3 id="effects.statmod">Stat Modification Effects</h3>
Stat mods are effects that temporarily modify your stats. They can often function as a "soft" version of hold effects: it may not prevent you from using magic outright, but if your magic stat has been crippled to the point that you'll only do middling damage... maybe best to wait. They can also incapacitate character archetypes that rely heavily on certain stats: the tank, for instance, might not be up for provoking attacks if their defenses have suddenly been stripped.

These effects are simple in theory, but they can really throw a wrench into players' strategies and shake up complacent tacticians.

But... this is going to be a numerical effect, so fine-tuning is crucial. Just how much are the stats changed by? Do you want it to be possible to drain a character all the way to 0 in a stat? Into the negatives?

The answer is first going to depend on what the stats actually <i>do</i>. How does a stat correlate to its effect? Will you only need small changes to see significant results, or big ones? If stats are relatively small and even single-digit changes can be significant, stat mods can get pretty overpowered if you're not careful.

Once you know what range of stat changes you want to be working with, there are a few ways you can get there. Most RPGs take a simple approach: effects always change stats by the same proportion, say 50%. This is easy to test because it means the effect always behaves the same no matter who uses or receives it.

However, complications still arise from this method. Recall from our discussion of <a class="noExternal" href="#dmgform.defenses">subtractive vs. divisive damage formulas</a> that stat changes can have wildly different effects depending on how they're applied. In a divisive defense system, fixed-proportion changes will work great throughout the whole game: the stat's effectiveness will always be reflected by the same amount. However, in a subtractive defense system, it's <i>absolute</i> changes that matter. If your characters' stats are increasing over the course of the game, the same proportional changes will lead to greater absolute differences. You can balance it well for the beginning of the game, but it'll behave totally differently by the end! Changing the effect to an absolute modification can be a viable solution, depending on how the rest of the system works.

If you want to make things more complicated, you can actually make stat mods function like an attack, with variable effects depending on the user and target. <i>Cartoon Battle</i> does this: stat mods use the same basic formula as regular attacks, but with the base and damping constants halved. This is very tricky to balance! Even if you can balance it correctly in a resting state, results can be volatile if the governing stats change. In the current version of <i>Cartoon Battle</i>, even a low-power Curse can totally cripple an opponent if their Special has been reduced. So maybe don't use this method for your first rodeo. Done well, however, it can create a cool shadow-battle mechanic where effect specialists can chip away at each others' stats just as fighters chip away at their HP.

The holy grail of this method is probably to make effect damage use the exact same formula as damage. <i>Bonfire</i> manages to do this, thanks to its heavy stat damper that both reduces the effect of large stat changes and prevents a buffed character's effects from getting too powerful.

<h3 id="effects.dot">Damage Over Time</h3>
Damage-over-time effects inflict damage at certain intervals, typically the start or end of a character's turn. This is one of the simplest effects conceptually, but one of the most complex to actually design.

The first question you want to ask is: how much damage? There are a lot of methods you can use, discussed in [[the code section|Documentation]].

Most RPGs use <b>proportional</b> damage, meaning that the effect inflicts a portion of max HP (usually 1/8th). This kind of damage affects everyone equally: everyone will go down in the same number of turns, no matter how much HP they have. This levels the playing field between tough and fragile characters, because you can't mitigate damage-over-time with more HP like you can with regular attacks. This may be a problem if you want a game with a heavy tanking and defensive focus where that distinction is supposed to matter; or you could purposefully use it as a special case to turn those rules on their heads.

Other games, including <i>Cartoon Battle</i>, calculate damage-over-time like a regular attack, allowing it to be mitigated by higher HP and defenses. You can make this calculation similar to normal damage, thus making damage-over-time as dangerous as a regular attack, or you could shrink it, making damage-over-time less significant. This may seem redundant with a regular attack that just does more damage, but you could use it as a purposeful tradeoff: it will inflict more damage overall, but you have to wait while the enemy continues to attack, and it could be cut off early if the target has a curing ability. You can also make it draw from a different stat, creating a mage/fighter distinction where certain characters are better at dealing damage through different methods.

The second question is: how long does it last? If it only lasts a set number of turns before expiring, then it is effectively just a delayed attack. If it never wears off, its total damage becomes indefinite, potentially making it much more dangerous. The latter implies a heavily status-based battle system, where status cures need to be thrown around a lot.

This all interacts with <a class="noExternal" href="#heal">healing</a>, too. You'll need to do a lot of mathematical planning and balance testing to make sure you don't make damage-over-time effects overpowering or insignificant.

<h3 id="effects.death">Instant Death Effects</h3>
Don't use these unless you really know what you're doing. Please. I'm begging you. The entire point of RPGs is that different characters are good at different things. If everyone gets killed equally well, defense-focused characters get the shaft. These totally wreck the game's balance unless you design the whole system around them.

And oh lordy, do not even get me started on <i>random chance</i> instant death effects. Are you trying to make a slot machine? No? Then please don't. Please.

<h3 id="effects.protect">Effect Protection</h3>
Status effects can be big gamechangers, to the point that they may be hard to balance if they're applied every time they're used. You could balance this by tweaking their effectiveness or the battle system around them, but there's often not a lot of middle ground between "harmless" and "overwhelming".

This is why you see a lot of RPGs make attacks apply effects only some of the time, putting it down to random chance. I, personally, hate this. A little random variance in damage or targeting is fine, but when something as important as a status effect is left up to random chance, the battle can go completely differently just based on a coin flip, through no fault of the player. There is something to be said for this method: a totally deterministic game is solvable, and therefore loses the fun if a player figures it out too easily. Randomness keeps a game fresh by forcing the player to roll with the punches and adapt on the fly.

But let's say you don't want that. You can also throttle status effect application through factors under the player's control, such as protective equipment or "safeguarding" effects like <i>Cartoon Battle</i>'s "Chi Shield". I recommend making these all-or-nothing, even if you incorporate randomness in normal effect application: a resource expenditure like equipment or a spell is so major that it's rather unfair if it has a chance of failure.

But then, what if you want some middle ground between complete immunity and complete vulnerablility to a status effect? Most RPGs handle this by making status effect resistance a kind of "dodge" stat, where e.g. a 50% resistance will let you avoid the effect 50% of the time.

I designed a deterministic form of this method in <i>Cartoon Battle</i>. The premise is to flatten random resistance chances into a deterministic pattern. For example: if you resist a status effect 50% of the time, then, on average, you should suffer the status effect on every other application. You can mimic this deterministically by giving characters a statistic (let's call it "tolerance") that acts sort of like "hit points" for the effect application: every time an effect would be applied, it's reduced, and when it runs out the effect sticks.

As an example, if we were to give a character a tolerance of 1 against the "Curse" effect, then if Mage targeted them with Curse, the target would not suffer the effect but their tolerance would be reduced by 1. The next time Mage used Curse, it would stick, as the target's tolerance is now at 0. When the Curse effect wears off, the enemy's tolerance is renewed at 1 again.

The end result of this is that they will <i>always</i> block the effect the first time it's used, but they will <i>always</i> take the effect if it's used a second time. The cycle then repeats. This has the same result as a 50% random resistance on average, but is fully deterministic. A tolerance value of 2 would correspond to a 67% resistance, a tolerance value of 3 would correspond to a 75% resistance, and so on.

I believe this has an advantage in that the player can see a consistent result to their actions. Attempting to apply a status effect to an enemy with random resistance can feel tedious and demoralizing, as there's no telling when or if you'll succeed. This "tolerance" system guarantees a result to a player after a given amount of investment.

There are also additional wrinkles you can add to this system. Perhaps some tolerances do <i>not</i> reset once a status effect gets through, but they have a greater starting value? Or perhaps the reverse, a tolerance that only comes into play after the effect has been applied once? You could create an additional "shadow economy" of attacks that destroy or shore up tolerances without applying effects themselves.

<h3 id="effects.player">Can players use them?</h3>
It's something of a debate whether or not to let players use status effects on enemies. Early RPGs typically didn't allow this at all, and even when they did it was usually a poorly-balanced afterthought.

However, there is good reason for this. All the difficult balance tweaking I mentioned in the earlier parts? If you want to give status effects to players, you have to do that a second time for everything, often running into brand-new problems because enemies usually behave differently than player characters. Enemies typically don't have healing skills, for instance. A proportional damage-over-time effect that's only chipping away at a player who can easily heal it back becomes devastating against an enemy that can't heal. If you apply proportional damage, you can just sit back and win any fight in a few turns. And what about control effects? Enemies typically have fewer abilities and more rigid behaviors; even a partial control effect like a skill lock could effectively be incapacitating. To say nothing of outright stun effects: if you just keep using that, you can win without letting the enemy get a single turn!

I advise giving status effects to your players because it opens up a huge avenue of new tactical options when done well. However, if you don't want to go through the work of balancing it, it's fine to keep things simple and just let the player focus on normal skills.

In <i>Cartoon Battle</i>, I gave players access to most status effects, but not all. Barring the "Winded" status was obvious, because enemies don't use the energy system in the first place. However, I also barred "Dizzy", the skill lock effect, due to the problem mentioned above. How would I even implement that? How would I determine which skills would be affected? How would I lock them off -- would I need to make two behavior sets for every enemy depending on if they were dizzy? That sounded like way more work than it was worth, so I just decided not to bother with it.

Striking this balance is a lot easier if you use a system where players and enemies are all on equal footing, such as in <i>Pokemon</i>. If not, the same effect can have different results when applied to players versus enemies, and some effects might just not be feasible. Do try not to fall into the trap of giving players status effects but making everything they might feasibly be useful against immune to them, though -- that's just pointless.

<h3 id="effects.extra">Noteworthy Examples</h3>
<ul><li>"Monster collecting games", of which <i><a href="https://en.wikipedia.org/wiki/Pok%C3%A9mon_(video_game_series)" target="_blank">Pokemon</a></i> is the most famous, often keep status effects relevant by making everyone operate under the same rules.</li>
<li>Status effects are often vital to strategy in the <i><a href="https://en.wikipedia.org/wiki/Shin_Megami_Tensei" target="_blank">Shin Megami Tensei</a></i> series.</li>
<li><i><a href="https://store.steampowered.com/app/706560/Jimmy_and_the_Pulsating_Mass/" target="_blank">Jimmy and the Pulsating Mass</a></i> streamlines the experience by only giving players access to a few status effects, mainly damage-over-time and a one-turn stun effect. No enemies are immune, even bosses. It is also only possible to protect against a few "basic" status effects; though this may seem unfair, it means no status effect can be totally debilitating, and forces players to actually figure out how to survive status effects instead of just ignoring them.</li>
<li><i><a href="http://site.scfworks.com/?page_id=8" target="_blank">Last Scenario</a></i> lets enemies use status effects against you relentlessly, but doesn't give you access to any. Much of the game's strategy involves figuring out how to block and mitigate status effects; until the endgame, your options are limited, so you must pick and choose which ones you can ignore and which ones you will have to endure.</li>
<li>The <i><a href="https://en.wikipedia.org/wiki/Monster_Hunter" target="_blank">Monster Hunter</a></i> series features a similar system to my tolerance mechanic, where attacking bosses with status effects will drain a resistance meter until they are finally applied. I actually wasn't aware of this at all when I designed my system, but it's good to know there's another example out there!</li>
</ul>

<h2 id="targeting">Targeting and AI</h2>
I hate random targeting systems in RPGs. Hate hate hate. RPGs often balance more powerful or useful characters by giving them poor defense, but if you have no way to meaningfully protect them, that just makes the battle a complete crapshoot. If enemies all gang up on your tough fighter, you'll be fine; if they all gang up on your healer every turn, you're screwed. It's the absolute worst system possible: You <i>know</i> the problem and the optimal outcome, but you're powerless to influence it. That's not fair and it's not fun.

...But you have to admit, making sophisticated AI is hard -- and a completely deterministic enemy becomes a solved game. A common compromise is to make targeting random by default, but give the player means to nudge the dice or influence who can and can't be attacked. In <i>Cartoon Battle</i>, I provided this through the Protector, Sneak, and Martyr abilities. It's possible for enemies to gang up on your squishy Mage if you're unlucky, but you can completely eliminate that possibility if you protect them -- at the cost, of course, of sacrificing Fighter's own turn. There's still uncertainty and risk, but it's a risk you can weigh and calculate. Other games use different methods, such as aggro systems that allow you to influence the enemy's behavior through other factors.

<h3 id="targeting.smart">Smart Targeting</h3>
The standard targeting system in the default engine is just random selection, nothing much interesting there. But I also added additional code for "smarter" targeting behavior. These procedures came logically from me imagining how I or another human player would think when selecting a target, and emulating that as best I could.

In the default engine, there is an effect, "Off-Balance", that makes the character more vulnerable to direct damage, but only lasts for one turn. Obviously, an attacker would want to prioritize anyone with this status (unless, of course, they were using a non-damaging move). Similarly, there is an effect, "Knocked Down", that sharply reduces a character's Defense stat -- also an obvious priority target. I included handlers for these effects that made the enemies prioritize them -- either to the exclusion of all else (on "hard" difficulty) or just having a higher chance to select them (on "medium" difficulty).

There is also, in the default engine, an additional wrinkle with debuff abilities: They are influenced by the target's Special stat, and so will be more effective if the target has reduced Special due to a debuff. So in the case that the enemy was using a debuff ability, I added another handler that made them prioritize such targets.

That's all the smart targeting I included in the default engine, but you could go a lot further. As a player, you probably like to focus your fire on the target with the lowest health or defense to take them out quickly; maybe enemies should do the same? You probably also recognize that certain types of enemies, like healers or mages, are more dangerous and should be taken out first; maybe enemies should be more inclined to target certain characters based on their class or other attributes. Think about your thought process when you select a target, and how you might translate that into programming logic.

This makes the enemies harder, but in a way it also makes the battles fairer. These outcomes are much worse for the player; but if we left it entirely up to random chance, players would have wildly different experiences depending on if the random selector chose a more vulnerable character or not. By making the enemies always prioritize vulnerable targets, players can't just rely on good luck to get them through the battle; they must actually pay attention to their defenses and protect characters appropriately.

<h3 id="targeting.aggro">Aggro Systems</h3>
The basic idea behind aggro systems is a logical one. If you think about how a player prioritizes targets, they make their decisions based on what abilities the enemies use, right? Obviously you'll want to defeat a healer before anything else, and then probably you'd want to go after a dangerous mage before a tough but less remarkable fighter. Aggro systems emulate this behavior by giving every action a statistic that draws enemy attention. The exact mechanics vary: Usually, doing more damage draws more attention, but healing and support abilities can also be made to draw aggro. The key advantage of such a system is that, by quantifying levels of enemy attention, you can give "tank" characters a lot more to do, such as "Taunt" abilities that draw additional aggro towards them, or an inverse ability that removes aggro from themselves or others.

The aggro system in the default engine is based on the one used in <i>Flawed Crystals</i>, a game made by A Friendly Irin in this engine, which was in turn based on the system used by the <i>Dragon Age</i> series of video games. You can read about how the system works in <i>Dragon Age</i> <a href="https://dragonage.fandom.com/wiki/Threat" target="_blank">here</a>.

You should notice that this system makes some key assumptions and tradeoffs that influence what the resultant gameplay will look like. The key means of drawing threat is through direct damage, which will draw enemy attention towards offensive characters and away from support characters. Moreover, threat gain is based not on total but <i>proportional</i> damage; this means that weak enemies who can be dispatched in a few hits will be more influenced by direct attacks, while strong enemies with lots of HP will be less easily moved. However, the corollary to this is that enemies with low dependence on direct attacks will be more strongly influenced by abilities that generate flat threat increments, such as the "Taunt" skill in <i>Dragon Age</i>.

You may note that one major departure from <i>Dragon Age</i> is that this system is actually less deterministic. In <i>Dragon Age</i>, enemies will <i>always</i> target the character closest to them who has the highest threat value. In our system, having the highest threat gives you a greater chance of being targeted, but it is not a guarantee. This is an important consideration in aggro systems: how strongly do you want it to control enemy behavior? Too much and it may, again, lead to a solved game where the player can easily direct everyone's attention to the tank, who shrugs off every blow while the mages lay waste to your foes with impunity. You would have to carefully tweak the tank's stats such that they cannot survive a constant onslaught and must occasionally pass the buck to someone else, and perhaps give enemies area-of-effect attacks that the tank cannot protect everyone from.

Another interesting feature of this system is that enemies do not coordinate. Threat is not universal; every enemy has their own unique set of threat values towards each character. An enemy will not bat an eye at a character annihilating their neighbor, so long as they aren't hit too. It's a lot simpler to consider every enemy in isolation like this, but that's not terribly realistic, is it? If an enemy starts wailing on a vulnerable character, you'd focus your fire to take them out quickly. It's worth considering how you might change the existing code to accomplish this, and why. (A common method is to tie aggro to the player characters, rather than every enemy having their own unique hitlist, and using this value to influence all enemies simultaneously.) This can make enemies a lot more dangerous, but their behavior will feel more like fighting against a human player.

Finally, note a contradiction in this system: I said that a human player would prioritize targeting enemies with support skills, but under this system, enemies do not register support characters at all! This can easily lead to very unbalanced gameplay where the healers can stay back and just keep healing the tanks continuously, who will continue drawing aggro and leave the healers untouched. The easy solution to this is to make support skills draw aggro too, but too much and you may end up tipping in the other direction, with supporters getting too quickly swarmed to use their abilities effectively. You can also generate an unstable feedback loop where a healer in danger needs to heal themselves, which in turn draws more aggro and gets them attacked more...

As with all things in design, this is a balancing act. How realistic do you want the enemies' behavior to be? How much do you want to force the player to outwit them and balance their actions? What behaviors do you want to incentivize or disincentivize? These are complicated questions, and the difficulty in answering them may explain why so many designers choose to make the AI more random and just give enemies more power to make up the difference.
