:: Changelog[text]
Version 3.05.1
<ul>
<li>Equipment will now print their character restrictions in their default <code>toString</code>.</li>
<li>The <code>itemDrop</code> widget now displays items with the default <code>toString</code> format.</li>
</ul>
Version 3.05
<ul>
<li>New <code>Actor</code> properties:</li>
<ul><li><code>numAdjacent</code>: Returns the number of other characters in the area specified by the passed argument. Useful for AI code.</li>
<li><code>guarded</code>: Returns <code>true</code> if the character is guarded by another character in the battle grid.</li>
<ul><li>The "guarded" property used by the "Guarded" status effect has been renamed to <code>areaImmune</code> to avoid conflicts.</li></ul></ul>
<li>New <code>Enemy</code> properties:</li>
<ul><li><code>actionsThisTurn</code>: Returns the enemy's list from the <code>actionsThisTurn</code> object in the battle controller.</li></ul>
<li>New <code>Action</code> properties:</li>
<ul><li><code>delayHold</code>: If <code>true</code>, character will be unable to act while the delayed action is charging.</li>
<li><code>delayMessage</code>: Returns a message to be displayed at the top of rounds if the user is charging a delayed action. Set to <code>null</code> to display no message.</li></ul>
<li>Delayed actions are now stored as <code>Action</code> objects rather than just their name. This is to more easily facilitate the behavior described above. The <code>setupAction</code> property is still a string.</li>
<li>Equipment can now cover multiple slots! Your dreams of giving your characters two-handed swords and three-piece suits can now be realized. To do this, define the item's <code>slot</code> property as a <code>Set</code> of the slots you want the item to cover rather than a string. A new item, the "Zweihander", has been added to the item database as an example. <i>Credit to A Friendly Irin for providing this code.</i></li>
<li>Fixed an error in <code>Enemy</code>'s <code>validTarget</code> function that prevented the guard check clause from behaving correctly.</li>
<li>Fixed an error that prevented <code>actorBox</code> from being used outside of battle due to it calling for the battle controller even when it didn't exist.</li>
<li>Removed the extra dead space between item entries in the equipment list.</li>
<li>Items in the equipment list are now displayed with the <code>Item</code> object's <code>toString</code> function for consistency with other items.</li>
<li>Effects' <code>addText</code> and <code>removeText</code> now take the entire character object as an argument, rather than just their name. This allows for more customizable messages.</li>
<li>Fixed a typo in the damage reflection code that prevented it from working correctly.</li>
<li>Updated the included Chapel macros bundle to be compatible with SugarCube 2.35.</li>
</ul>
Version 3.04
<ul>
<li>New <code>Actor</code> properties:</li>
<ul><li><code>position</code>: When invoked, it returns the character's cell in the grid; when set, it adjusts their <code>row</code> and <code>col</code> values and swaps the contents of the destination cell.</li>
<li><code>loadBearing</code>: Boolean. If a load-bearing character is defeated, the battle ends regardless of the state of their team members.</li>
<li><code>uncounted</code>: Boolean. Uncounted characters are not counted towards the victory and defeat counters, and do not need to be defeated to end an encounter.</li>
<li><code>hasEffect</code>: Returns Boolean based on if the character has the named effect. Can also test for multiple effects by passing an array (but will return <code>true</code> if the actor has <i>any</i> of the named effects).</li></ul>
<li>Movement code has been simplified to take advantage of the <code>position</code> property.</li>
<li>Victory handler code has been tweaked; instead of instantly moving to victory or defeat screens if their conditions are met, they are added to a <code>_destinationQueue</code> variable. After all the code is done, the player will be forwarded to the first element in <code>_destinationQueue</code> if one exists. This should avoid issues with <code>goto</code> pileups.</li>
<ul><li>Special deaths are also added to this queue, and will now take priority over the standard victory destinations.</li></ul>
<li><code>pushAttack</code> should now work with the new battle grid code.</li>
<li>The code for displaying the actor box container has now been compartmentalized into a passage, <code>Actor Box Container</code>, if customization without changing the surrounding actor box code is desired.</li>
<li>Enemies now have setters for <code>xp</code> and <code>gp</code> properties.</li>
<li>The code for the <code>Bestiary</code> class has been split into a separate file.</li>
<li>The code for battle widgets and setup has been split into a separate file, <code>Battle Setup.tw</code>.</li>
<li>The code for each hotkey has been compartmentalized into its own passage for greater modularity.</li>
<li>Adjusted the code for <code>healCalc</code> to make use of an action's <code>formula</code> property, if it has one, as well as compartmentalizing the default healing formula into a separate passage.</li>
<li>The action info popup now has a high z-index value, preventing it from being obscured by other page elements.</li>
<li>Added a new targeting parameter, "no effect". If included, the action will preferentially target characters that don't already have any of the action's effects (as specified in the <code>effects</code> property). This parameter is present for both ally and enemy targeting.</li>
<li><code>addEffect</code> now records whether the effect was applied (and what blocked it, if not) as a property, <code>effectApplied</code>, of the calling <code>Actor</code> object. <code>effectApplied</code> is an object with effect names as keys and return values from <code>testEffect</code> as values.</li>
<li>Added event triggers on several common battle functions, in case you want to tie special events to them. Current events are:</li>
<ul><li><code>:puppet-selected</code>: triggered on puppet selection</li>
<li><code>:act-selected</code>, <code>:rest-selected</code>, <code>:item-selected</code>, and <code>:move-selected</code>: triggered on selection of the respective command</li>
<li><code>:action-selected</code>: triggered on action selected (also works if selected via hotkey)</li>
<li><code>:action-performed</code>: triggered when action performed by puppet</li>
<li><code>:target-selected</code>: triggered on target selection</li>
<li><code>:endturn-run</code>: triggered upon execution of end-turn code.</li></ul>
</ul>
Version 3.03
<ul>
<li><b>The battle grid has been redone.</b> Positioning is now determined by manually-set <code>row</code> and <code>col</code> values rather than the index of the character. This means you don't have to fill parties with <code>null</code> entries anymore!</li>
<ul><li>Code for displaying characters in the battle grid is now stored in a separate file, <code>Battle Grid.tw</code>, to keep the main code uncluttered.</li>
<li>Additionally, the broken "move" command has been fixed.</li>
<li>Empty tiles are now styled with dotted borders rather than solid ones to make them less obtrusive.</li></ul>
<li>The <code>noself</code> check for ally-targeting abilities now checks the target's <code>id</code> rather than its <code>name</code>. This will prevent glitches in the case of a party having multiple characters with the same name.</li>
<li>New <code>Action</code> property: <code>canTargetDead</code>. If <code>true</code>, the action can target dead characters. This is useful for revival skills and the like.</li>
<ul><li>The "Actor Box" widget has been slightly tweaked to enable this function. "Actor Box Name" is now used for the display of dead character names as well, and has a priority branch that will bypass all others if the character is dead and the battle phase is not in targeting.</li></ul>
<li>The "last action" functionality should work again.</li>
<li>New <code>Effect</code> property: <code>guardBreak</code>. Effects with this property will prevent the victim from guarding characters (if you are using a battle map). There is a corresponding getter in <code>Actor</code>, which will also return <code>true</code> if the character is <code>dead</code>.</li>
<li>During the targeting phase, hovering over a viable target will now highlight them and any targets affected by the action's area of effect, if it has one.</li>
<li>You will no longer get an error if the handler for saving <code>lastAction</code> fails to find the action in the subject's actions.</li>
</ul>
Version 3.02
<ul>
<li>The gameplay effects of an action are now calculated before the text description is rendered. This allows you to customize the text based on variable results of the action, e.g. whether or not the attack missed. The <code>_hit</code> variable is now passed to <code>actText</code> to facilitate this.</li>
<li>The item display box in the menu now has a fixed height; item descriptions that exceed the height will generate a scrollbar. This will prevent UI elements from jumping around.</li>
<li>Using items or actions from the menu will now generate a brief notification informing the player of the results. This notification is taken from the return value of the <code>onUse</code> function.</li>
<li>Stylesheet files for the party menu and for battle layout have been split into separate files and grouped into a single folder each.</li>
<li>The code for individual screens of the party menu have been split off into their own twee files.</li>
<li>The "Example" enemy will no longer accidentally be given a bestiary entry.</li>
<li>You can now filter character actions to only usable ones in the menu.</li>
<li>Puppets will now display their HP/MP values instead of their equipment when being selected for an in-menu action.</li>
<li>Fixed a bug where pressing R while using an action from the menu would cause the action to be performed on the first puppet in the party. There is now a cancel button included in the action display, and pressing R will trigger it.</li>
</ul>
Version 3.01
<ul>
<li>Target and subject variables have now been decoupled from the battle controller <code>B</code>. This allows more flexible usage of functions and widgets that call for interactions between characters, but may cause problems with existing code. Report any bugs.</li>
<li>Equipment slots are now always occupied by arrays, instead of only those with multiple subslots. This should result in no functional change, but allows me to clean up equipment functions by not having to account for branching functionalities. <b>Note that this update will generate errors with existing games that used previous versions.</b> You will need to update your characters' equipment slots to match the new standards.</li>
<li>Default and last actions are now stored as strings rather than full Action objects. <b>This update will cause errors with existing games that store these variables as Actions.</b> Make sure to update existing savefiles if you update to this version.</li>
<li>The widget <code>actionlist</code> has been split into <code>actionListBattle</code> and <code>actionListMenu</code>, for the different displays of actions in and out of battle.</li>
<li><code>Action</code>s, <code>ItemAction</code>s, and <code>Item</code>s now have unique <code>toString</code> functions that determine a standardized display for each. <code>actionList</code> and <code>itemList</code> have been restructured to take advantage of this function, making it much simpler and easier to use. (To customize the action display, attach a custom <code>toString</code> to the <code>Action</code> prototype.)</li>
<ul><li>The widget <code>actionInfo</code> has been removed, as it is now redundant with this feature.</li></ul>
<li>New <code>Action</code> properties:</li>
<ul><li><code>invisible</code>: If <code>true</code>, the action will not be displayed in the action list.</li>
<li><code>onApply</code> and <code>onRemove</code>: Function as the corresponding properties for <code>Effect</code>s and <code>Item</code>s. Useful for keeping track of passive abilities, and other side-effects if you want to have modular actions. However, currently there's no in-built functionality for this in the party menu.</li>
<li><code>onUse</code>: Functions as the corresponding property for <code>Item</code>s. Rudimentary GUI has been added in the party menu code, but is untested. Report any bugs.</li>
<li><code>toleranceDamage</code>: Determines the number of tolerance points the action will remove if it applies an effect.</li>
<li><code>hits</code>: Determines the number of hits in a multi-hit attack. (This is now automatically read by the <code>multihit</code> function as a default.)</li>
<li><code>effects</code>: Array of strings; lists the effects the action will apply. (This is now automatically read by the <code>applyEffect</code> and <code>removeEffect</code> functions as a default.)</li>
<li>The checks for action link availability. The freefloating functions have been removed.</li>
<li><code>preview</code> has been revamped: In the absence of a custom function, it will construct an appropriate preview automatically based on the action's properties, e.g. if <code>weight</code> exists, it will provide a damage prediction.</li></ul>
<li>New <code>Item</code> properties:</li>
<ul><li><code>instantUse</code>: If <code>true</code>, will cause the item's <code>onUse</code> function to be executed immediately when selected, instead of selecting a target first.</li>
<li><code>stackSize</code>: Integer determining the maximum number of copies that can be stored in an inventory.</li></ul>
<li>Character HP can no longer be reduced below 1 by negative HP regeneration.</li>
<li>Added customization passages for <code>endOfRound</code> and <code>refreshPuppets</code>.</li>
<li>Renamed the variables <code>lastingDamage</code>, <code>reviveAfterBattle</code>, and <code>actionRefillAfterBattle</code> to all be properties of one object, <code>afterBattleRecovery</code>. <code>refreshPuppets</code> has been tweaked to make more sensible use of this object.</li>
<li><code>refreshPuppets</code> now automatically removes effects with <code>ULTIMATESTICKY</code>.</li>
<li><code>endofbattle</code> now runs its custom passage <i>before</i> <code>refreshPuppets</code>. This is useful if you need to alter a variable used in <code>refreshPuppets</code>, such as <code>afterBattleRecovery</code>.</li>
<li><code>Puppet</code> and <code>Enemy</code> objects now have an additional function: <code>validTarget</code>. This determines whether they can be selected by the player in the targeting phase, and replaces the massive clunky blocks of logical expressions previously used for this determination.</li>
<li>New <code>Actor</code> properties:</li>
<ul><li><code>shieldHits</code>: Returns the total number of hits remaining on shield effects possessed by the character.</li>
<li><code>decTol</code> now takes an additional argument for the number of points to reduce the tolerance by (defaults to 1).</li>
<li><code>testEffect</code> and <code>testRemoval</code>, which test if a given effect can be applied or removed, effectively. These are used to construct previews.</li></ul>
<li>New <code>setup</code> variables:</li>
<ul><li><code>STATUS_BUTTON</code>: Text to be displayed to create the status buttons.</li>
<li><code>SCALE_NAMES</code>: Set to <code>true</code> to scale actor names to the width of the actor boxes, as specified in <code>scaledTextDiv</code>.</li></ul>
<li>Fixed a bug in <code>BestiaryEntry.revealAll</code>. It will now reveal tolerances correctly.</li>
<li>Finally caught up with the modern era and made a repository for the project on GitHub. A link is now provided in the sidebar.</li>
</ul>
Version 3.00
<ul>
<li>Targeting logic has been overhauled. It is now handled through functions rather than widgets, and certain adjustments such as Firefly have been automated.</li>
<ul><li>A <code>Hitlist</code> class has been defined to facilitate this. It is an array that takes a set of targets and tracks the chance of selection for each. Smart targeting effects have been placed in a method function, <code>addFactors</code>.</li>
<li>Added several additional smart targeting clauses.</li>
<li>Added an additional targeting factor: "Wallflower". This functions as the inverse of Firefly, halving the chance of being targeted.</li>
<li>Firefly and Wallflower adjustment factors can now be modified through the <code>setup</code> variables <code>FIREFLY_FACTOR</code> and <code>WALLFLOWER_FACTOR</code>.</li>
<li>Added support for enemies being affected by loss-of-control effects.</li>
<li>The functionality of <code>threatTarget</code> is now automatically provided by the <code>Hitlist</code> constructor.</li>
<li>Default calculation for threat values has been cut by 100, to better sync with other targeting adjustments. This includes <code>THREAT_DECAY</code>.</li>
<li><code>guardCheck</code> and <code>protectionCheck</code> are now static methods of <code>Hitlist</code> and are automatically called whenever the <code>returnTarget</code> method of <code>Hitlist</code> is used.</li></ul>
<li>Actors now have getters for their own party and the opposing party, because I got sick of having to write that out manually.</li>
<li>The getter for <code>targetMod</code> has been altered to automatically return relevant mods for the action. For example, piercing moves will add <code>pierce</code> and debuff-inflicting moves will add <code>effect</code>.</li>
<li><code>effectCount</code> now takes an argument that will exclude sticky effects.</li>
<li>AI logic functions have been moved from <code>database-enemies</code> to a new file, <code>logic-functions.js</code>.</li>
<ul><li>The functionality of <code>dispelTarget</code> has been adapted into the logic function <code>dispelCheck</code>.</li>
<li>A new logic function, <code>cureCheck</code>, has been created. This is the ailment version of <code>dispelCheck</code>, for enemies that use curative moves.</li></ul>
<li>New Effect property: <code>threat</code>. This is the value checked by <code>dispelCheck</code> and <code>cureCheck</code>, rather than just a straight count. This allows you to weight certain effects more highly. By default, all effects have a threat of 1, except for Blessing and Curse, which have 3. Effects with indefinite durations have their threat doubled, and effects with definite durations have their threat increased by the duration over 4.</li>
<li>The <code>multihit</code> function has been slightly altered to avoid using widgets. It now lacks the potential for spread functionality; use <code>multihitCustom</code> for that.</li>
<li><code>immortal</code>, <code>large</code>, and <code>maskhp</code> are now canonized as official <code>Actor</code> properties; you can assign them to database entries without needing to go through <code>specialInit</code>.</li>
<li>Created setters for <code>Action</code> properties to make them easier to edit. You'll no longer need to preface your properties with underscores.</li>
<li>New <code>Actor</code> property: <code>lastDmg</code>. This tracks the amount of damage the character inflicts with their attacks. It is reset at the start of every battle and every turn. This can be used for additional targeting logic, e.g. prioritizing the most dangerous character.</li>
<li>New <code>Effect</code> property: <code>unique</code>. This prevents multiple instances of the effect from existing in a party. A handler for dealing with this functionality has been added to <code>addEffect</code>.</li>
<li>I have started cleaning up enemy database entries by defining their actions in the action database, which will make them significantly less messy. These actions are defined in the <code>enemy-actions.js</code> file in the <code>custom</code> folder; it is separate from the <code>database-actions</code> file to keep that file clean. Currently, only Dipper and Mabel are done.</li>
<li>Existing effects and enemies have been split off into core files, as actions are.</li>
</ul>
Version 2.05
<ul>
<li><code>removeEffect</code> now defaults to "all" if no effect type is specified.</li>
</ul>
Version 2.04
<ul>
<li>The action database is now separated into two files: <code>core-actions.js</code> is located in the <code>core</code> folder and contains the actions used by the default puppets; <code>database-actions.js</code> in the <code>custom</code> folder lets you expand the database with additional actions. This is useful if you use the core actions in your game and need to update them without overwriting your custom actions.</li>
<li>A stylesheets folder has been added to <code>core</code> and <code>custom</code> folders, and stylesheets have been separated appropriately.</li>
<li>The effect manager file has been moved to <code>core</code>. If you need to overwrite it with a custom version, a new file has been including in <code>custom</code> with instructions on how to do so.</li>
<li><code>addEffect</code>'s duration parameter changed from <code>time</code> to <code>dur</code> for consistency with actions.</li>
</ul>
Version 2.03.2
<ul>
<li>Fixed a bug where the player could not be forwarded to the victory destination because <code>endofbattle</code> was run before <code>goto</code>, destroying the destination variable.</li>
</ul>
Version 2.03.1
<ul>
<li>Fixed a positioning glitch with the action info popup.</li>
<li>Fixed a bug in Salvation and Assault.</li>
<li>Fixed several text glitches in the descriptions and previews of actions that added effects.</li>
<li>Setting toggles are now tied to <code>setup</code> rather than story variables, meaning they will be tied to the game file itself rather than specific save files.</li>
<li>Streamlined the code governing Off Your High Horse and turned it into an action function, <code>removeLastEffect</code>. This should hopefully remove any loop errors that occurred when using it.</li>
<li><code>justdmg</code> has been alterned to return a function rather than a string, to enable better chaining. <b>However, this means that it must be assigned to Action properties with a function call, rather than as a variable.</b></li>
</ul>
Version 2.03
<ul>
<li>The height of the battle pane will now scale with the window height.</li>
<li>Rearranged the folder structure to better differentiate core and custom code.</li>
<li>Characters will now only appear dead after an attack has finished.</li>
<li>Character boxes will no longer display the status button during the damage readout.</li>
<li>Added new Actor method: <code>effectCount</code>. It will return the number of instances of the named effect the character possesses. This can also be used to count all effects of a certain category (buffs, ailments, holds, etc.)</li>
</ul>
Version 2.02
<ul>
<li>Fixed a glitch where enemies would not be flagged dead the first time their HP reached 0 if animations were enabled. (This has in turn created a glitch where enemies are flagged dead before the killing blow finishes animating, but that is more minor and I will deal with it later.)</li>
<li>Example entries for actions, effects, items, puppets, and enemies have been added to the default databases. These entries have the most relevant attributes for each class enumerated and set to their default values. You can copy and work off this entry to make your own entries more easily.</li>
<li>Effect database entries are now denoted with double rather than single quotes, for consistency with the other databases.</li>
<li>Implemented proper support for delayed actions, including for enemies. You can now have any action set up a delayed action by using the <code>setupAction</code> and <code>setupDelay</code> properties, which provide the name and delay time of the delayed action, respectively. Additional code in <code>newTurn</code> and <code>specialcheck</code> will automatically keep track of queued actions and execute them when ready. (Note that <code>specialcheck</code> is a custom passage; if you've already defined your own custom special checks, copy the new data carefully.) Enemy turn logic has been slightly altered to allow for enemies to perform delayed actions while dead; tell me if this causes any unforeseen weirdness.</li>
<li>New Action property: <code>targetMethod</code>. This allows you to set a custom targeting method for enemy and delayed actions. It is called on enemy turns immediately after their action is selected, and defaults to <code>randomTarget</code>.</li>
<li>Respawn proportion can now be set individually for each character, through the <code>respawnHP</code> property. It will still default to <code>RESPAWN_HP</code>.</li>
<li>A respawn stat will now always be set for characters, even if it is not defined in their database entry. By default it will be 0, and respawn checks have been adjusted accordingly to ignore characters with a respawn of 0.</li>
<li>Added new Actor methods: <code>statRaised</code> and <code>statLowered</code>, which return a Boolean if the relevant stat is greater than or less than its base, respectively.</li>
<li>Several puppet actions have had their texts rewritten to work with other pronouns.</li>
<li>Removed a text glitch that ocurred when using an item in battle.</li>
<li>The rest action will now remove Winded instead of Knocked Down, as intended.</li>
<li>Hitting an Off-Balance character should no longer cause an error.</li>
<li>It should no longer be possible for dead characters to gain non-persistent effects.</li>
</ul>
Version 2.01
<ul>
<li>New action properties: <code>enemyCD</code> and <code>nameCD</code>. These values will be automatically read to set the values of an enemy's cooldown Map when actions are executed. They default to the action's <code>cooldown</code> and <code>name</code> properties, but they can set to custom values if desired.</li>
<li>Continuing in the theme of "features I implemented embarassingly late", player actions will now decrement cooldown at the start of a round.</li>
</ul>
Version 2.00.1
<ul>
<li>HP cost will now be automatically deducted when using HP-consuming skills.</li>
</ul>
Version 2.00
<ul>
<li>Added a new file in <code>javascript/custom</code>: <code style="font-weight:bold">mods.js</code>. This file is designed as a catch-all for any miscellaneous code the user wants to add to the JavaScript. It consists of a function, <code>customMods</code>, which is run at the end of StoryInit. (This placement is to ensure any relevant <code>setup</code> variables are defined first.) Currently, the code for Puppets' Energy- and Crisis-related attributes have been moved there, along with <code>XPtoNext</code> and <code>initialThreat</code>. This way, you can easily modify the specific functions you need without needing to edit the class definition.</li>
<li>The <code>addeffect</code> widget has been depreciated, and its code has been moved to <code>Actor.addEffect</code>.</li>
<ul><li>"effect adder custom blocks" has been depreciated, and its functionality is now handled through properties of Effect objects: <code>block</code>, <code>blockCondition</code>, and <code>blockText</code>. Block effects now have a <code>priority</code> attribute as well to determine the order in which they resolve.</li>
<li><code>applyEffect</code> has been completely redone to better mesh with this change. It is now much simpler and is only capable of applying unmodified effects to a single target. For more complicated behavior, just use <code>addEffect</code> directly.</li>
<li>Actions have been edited to comply with the above change. Let me know if any bugs occur.</li></ul>
<li><code>Puppet.getStatCost</code> has been depreciated.</li>
<li>Indirect damage will no longer trigger shield effects.</li>
<li>EN cost is now deducted before actions execute, rather than after. This also allows Focus to work as intended without any additional code.</li>
<li>Effect duration is now capped at a number specified by <code>DURATION_MAX</code>, set as part of <code>setup</code>.</li>
<li>Shield effects should now block status ailments. Additionally, if a damaging attack is blocked or dodged, status effects inflicted by the attack will also be blocked.</li>
<li>Future applications of the same effect will now add to the effect's duration instead of resetting it.</li>
<li>Fixed a glitch in Thorns (and any similar effects) where the original target would still take damage. Shield effects that inflict damage on someone else should no longer have data bleed leading to unusual behavior.</li>
</ul>
Version 1.27
<ul>
<li><code>deathMessage</code> can now be defined as a database property.</li>
<li>Equipment slots can now be defined in <code>StoryInit</code>, through the variable <code>DEFAULT_EQUIP_SLOTS</code>, or as a database property, instead of being hardcoded in the Actor constructor.</li>
<li>Added a new support function, <code>resetAnimation</code>, that can be used to reset an animation mid-play. This function has been used to tweak hit animations such that shaking popups now take the same amount of time as non-shaking popups, hopefully reducing the time spent waiting for long multi-hit attacks to resolve.</li>
<li>The delay between popups can now be adjusted through the <code>ANIM_DELAY</code> variable.</li>
<li>Removed the "effect adder synonyms" passage. Functionality is now handled through a <code>synonym</code> property for Effects. If you define a <code>synonym</code>, the effect will be synced to that tolerance during tolerance calculation.</li>
<li><code>uncontrollable</code>, <code>untargetable</code>, and <code>shield</code> effects now operate the same way as <code>hold</code> effects, preventing unexpected overwrites.</li>
<li>Actors' <code>addEffect</code> and <code>removeEffect</code> functions have been compartmentalized into a separate file, <code>effect-manager.js</code>, for easier customization of effect logic.</li>
<li>Animations can now be toggled on and off through the settings menu.</li>
<li>Link color preferences should now work correctly again.</li>
<li>Knocked Down puppets should be unable to act again.</li>
<li>Damage-over-time messages will no longer display if the victim is defeated.</li>
<li>Counterattacks and mark attacks should now animate correctly. They are also now handled on their own passage, rather than appended to the previous action.</li>
<li>"custom end of action effects" now runs as part of "action effects". <code>markAttack</code> and <code>hunterCheck</code> have also been moved to "custom end of action effects".</li>
<li>Counter logic has been offloaded to its own passage for modularity purposes.</li>
</ul>
Version 1.26.1
<ul>
<li>Health meters will no longer break if the player refreshes during a battle. Refreshing can still cause other problems, though, so try not to do it.</li>
<li>Removed the "enemy holds" passage and replaced it with a <code>priority</code> property for effects. Effects are now sorted by <code>priority</code> to determine the correct hold effect to resolve.</li>
<li>Fixed a bug where, in the case that a character was under multiple hold effects, removing just one effect would remove their <code>noact</code> property and allow them to act again. This has been corrected by defining a new property for effects, <code>hold</code>, and defining a getter function for <code>noact</code> in <code>Actor</code> that returns whether or not the character's effects contain a hold effect.</li>
<li>Gaining Alert from losing Stunned will no longer generate a popup.</li>
<li>Enemies will no longer generate a popup when righting themselves from Knocked Down.</li>
<li>Puppets will no longer generate a popup by curing their ailments via Struggle or Rest.</li>
<li>Puppets will no longer generate a popup at the start of battle for any ailments removed at the end of the previous battle.</li>
<li>Protector and damage-over-time effects should work correctly again.</li>
<li>HP regeneration will now be communicated via popups at the start of every round.</li>
</ul>
Version 1.26
<ul>
<li>Documentation has now been split into "Basic" and "Advanced" sections. The "Basic" section should hopefully help people with less coding experience get into the engine more easily.</li>
<li>Top-of-round effects should no longer trigger multiple times if an enemy uses an instant action as their first action.</li>
<li>Indirect damage will no longer create popup messages.</li>
<li>Puppets will no longer gain EN after every enemy turn.</li>
<li><code>actorBox</code> is now in its own file, "Widgets (Actor Box)", and each of its elements has been made modular.</li>
<li>Tightened restrictions on <code>uses</code>, <code>cooldown</code>, and <code>warmup</code> attributes in the <code>Action</code> constructor; they will now only be applied if they are integers.</li>
<li>You can now specify an <code>action</code> property for entries in the item database if you wish for their associated action to be different than their name.</li>
<li>Removed <code>DoT</code> and <code>Protector</code> subclasses, as they were unnecessary. Their special attributes are now handled by an additional catchall argument to the <code>Effect</code> constructor.</li>
<li>Removed the "lastaction mods" passage and replaced it with the "saveMod" property for actions. If you want to save a different action, assign a name to its {{{saveMod}}} property.</li>
<li>Added documentation for animation code.</li>
<li>Revised the installation instructions for clarity.</li>
<li>Fixed dummy links in the documentation headers and restored the external link icons for external links.</li>
<li>Reduced the line height of text in the documentation passages for easier reading and less dead space.</li>
</ul>
Version 1.25
<ul>
<li><b>NEW FEATURE:</b> Battle animations! Nothing fancy, but actor boxes will now shake and produce damage value popups during action phases. You can turn them off by disabling the <code>ANIMATIONS</code> flag in <code>StoryInit</code>.</li>
<ul><li>As a consequence of the above, enemy actions now occur one at a time, instead of all at once. Tell me if this produces any bugs for you.</li></ul>
<li><code>damageCalc</code> will now only attempt to append element messages if the relevant setup variable exists.</li>
<li>Fixed a bug in the number hotkey code.</li>
<li>In-battle actor display is now standardized through a widget, <code>actorBox</code>. This should make modifying the default display easier.</li>
<ul><li>The documentation has been updated to document this feature.</li></ul>
<li>Actor boxes for dead characters are now aligned to the top of the flex container, and their height is restricted to only the height of the character's name.</li>
<li>Dead characters now display a † (dagger) symbol in place of the status button.</li>
<li>Fixed a bug that prevented <code>oncePerTurn</code> actions from deactivating correctly.</li>
<li>Fixed a bug that would allow illegal actions to be performed through the last action button under some circumstances.</li>
</ul>
Version 1.24.1
<ul>
<li><code>newturn</code> and <code>endofround</code> have been renamed to <code>newTurn</code> and <code>endOfRound</code> for clarity.</li>
<li>Effect decay messages are now lumped into one box per character.</li>
<li>Effect decay messages have now been standardized into one widget, <code>decayMessage</code>, which is called in both <code>newTurn</code> and <code>endOfRound</code>.</li>
<li><code>newTurn</code> has been modified to also work with enemy parties, and is now called in the enemy phase.</li>
<li>Console asserts have been added to <code>newTurn</code> and <code>endOfRound</code> to enforce proper behavior.</li>
<li>Prone characters will no longer count towards the automatic turn end counter. This is to prevent a glitch where if all puppets were knocked down, the player would never get an opportunity to right them.</li>
<li>Actions that cost 0 EN will now display their cost again. Crisis actions will only display a cost if it is greater than 0.</li>
<li>Updated documentation to reflect changes.</li>
</ul>
Version 1.24
<ul>
<li>Rogue now has a special Crisis that allows them to use any battle item for free. Try it out and see if it breaks anything.</li>
<li>Tweaked Crisis display code so that it will no longer display if no Crisis abilities are specified in the puppet's database entry.</li>
<li>You can now set specific Crisis factors for individual puppets. They will still default to <code>CRISIS_FACTOR</code> if unset.</li>
<ul><li>Rogue now has a larger Crisis factor than other puppets: they will max their Crisis guage after losing 40% of their health.</li></ul>
<li><code>passagejump</code> actions will now forward the player to the passage specified by the <code>passagejump</code> attribute, consistent with the documentation for the <code>passagejump</code> getter.</li>
<li>Created an <code>actionCheck</code> function that condenses all the action checks into one call.</li>
<li>The last action notifier will now be greyed out if the action is unusable.</li>
<li>Fixed a bug related to the W hotkey.</li>
<li>Added discussion and documentation for the Crisis feature.</li>
</ul>
Version 1.23.2
<ul>
<li>Realized widgets couldn't be clobbered, so every widget is now in its own passage. If you wish to replace a widget with a custom version, just make a new passage with the same name in the <code>passages-unique</code> folder and it'll be replaced.</li>
<li>Database and class definitions have been partitioned into different files and folders for easier updating. You can now update the core JavaScript files without overwriting your custom databases.</li>
<li><code>statInfo</code> and <code>hiddenStats</code> definitions moved to StoryInit.</li>
<li>Fixed a bug that was causing <code>actionLink</code> to fail in certain circumstances.</li>
<li>The Q hotkey should no longer trigger the "end turn" button.</li>
</ul>
Version 1.23.1
<ul>
<li>Fixed a typo that was causing the effect adder to fail.</li>
</ul>
Version 1.23
<ul>
<li><b>NEW FEATURE:</b> "limit break" abilities! Puppets will fill up a Crisis bar as they take damage, and can unleash a powerful ability when it's full.</li>
<li>Prettified end-of-round messages. They now display in the style of actions instead of plain text.</li>
<li>Added handlers for indirect damage (e.g. damage-over-time) to <code>echoDamage</code>. Indirect damage will ignore most checks such as damage reflection, off-balance, and counters.</li>
<li>Damage-over-time damage is now handled through <code>echoDamage</code> rather than manually.</li>
<li>The <code>decay</code> function for Effects will now always return something, and will return an empty string if the effect didn't expire.</li>
<li>You can now pass a puppet as an argument to <code>actionList</code>.</li>
<li>The "struggle" and "rest" commands will now correctly remove their respective statuses.</li>
<li>Fixed a bug in the "massAttack" actions and previews.</li>
<li>Hunter and counter checks are now hardcoded into the main battle passages. The widgets governing Mark and Hunter attacks have been offloaded to their own passage, "Widgets (Special Attacks)" for easier modularity.</li>
<li>Piercing attacks will now use the lower of the target's Defense and the stat minimum, instead of always using the latter. This allows them to gain the benefit from negative Defense.</li>
<li>Special deaths should no longer be skipped by the auto-endturn function.</li>
<li><code>B.specialmsg</code> has been changed to a temporary variable. Now you will no longer need to reset it when your special message has finished.</li>
<li>Cleaned up action display code. The various tests have been condensed into functions, found in the support functions file.</li>
<li>The clunky check for whether Sacrifice was used on the current turn has now been turned into a general feature: actions with the <code>oncePerTurn</code> property will gain a <code>used</code> property after use and cannot be used again until it is cleared, which occurs on <code>newturn</code>.</li>
<li>The clunky check for Sacrament and Blaspheny's prior element requirement has been turned into a general function, <code>actionElementCheck</code> in support functions.</li>
<li>Energy regeneration is now a property of puppets rather than a system constant. This allows you to make puppets with different regeneration values.</li>
<li>Actions that cost 0 EN will no longer display a cost value in the actions menu.</li>
<li>The compressed action info box will now direct the player to hover over actions when nothing is selected.</li>
<li>There is now an option to remove ULTIMATESTICKY effects within battle. Simply assign a value of "ultimate" to the <code>unsticky</code> argument.</li>
<li>Fixed a rare bug where rounding errors could cause damage to erroneously be considered absorbed.</li>
<li>Removed outdated reference images from the documentation.</li>
<li>Self-inflicted status ailments should now bypass Chi Shield, as intended.</li>
</ul>
Version 1.22.1
<ul>
<li>Fixed a bestiary-related bug that would occur when an enemy was struck with an element or ailment.</li>
<li>Fixed a bug in Sacrament and Blasphemy.</li>
</ul>
Version 1.22
<ul>
<li><b>NEW FEATURE:</b> You can now give characters an <code>onHit</code> function that will execute whenever they are struck by damage. Note that this is separate from damage reflection.</li>
<li>Several action functions have been restructured to use a single <code>args</code> argument, the properties of which make up the rest of the arguments. This will make it much easier to contruct action functions, as you can omit irrelevant arguments entirely and clearly label every argument you need. However, I may not have converted all existing actions to the new format correctly, so tell me if you encounter any bugs.</li>
<li><code>chiCheck</code> has been renamed to <code>effectCheck</code>, and can now check for any effect.</li>
<li>Fixed a bug with the "any" modifier in <code>randomTarget</code> and added support for enemies being affected by loss-of-control effects as well.</li>
<li>The code for the Bubble and Thorns effects have been generalized to work with other effects. The code now checks if the target of an attack has a "shielded" flag, then searches their effects for an effect with a "shield" flag and runs its "onHit" function.</li>
<li>Fixed a bug in <code>splashDamage</code> that created an extra blank line.</li>
</ul>
Version 1.21.3
<ul>
<li>Rearranged the conditional checks in <code>callEncounter</code> so that the bestiary update loop is only run if the bestiary is defined.</li>
<li>There is now a preview function for healing actions.</li>
<li>Items now have a getter for <code>special</code>.</li>
<li>The enemy status display should no longer throw error messages.</li>
<li>Enemy names should now display properly during the targeting phase.</li>
<li>Fixed a bug in <code>randomTarget</code> that caused problems when a party array was passed as an argument. It is now passed as a string instead.</li>
</ul>
Version 1.21.2
<ul>
<li>Added a section on the design of story-based/fixed progression.</li>
<li>Added a section on the design of skill progression.</li>
<li>Slightly edited the design sections to provide some more information and resources.</li>
<li>Added a return-home link at the bottom of info pages.</li>
</ul>
Version 1.21.1
<ul>
<li>The bestiary now flags every enemy as encountered (allowing them to appear in the bestiary) on game load.</li>
<li><code>gp</code> and <code>xp</code> properties are now in lowercase, for standardization with <code>hp</code>.</li>
<li>The code for formation and bestiary menu entries have been offloaded to separate twee files.</li>
<li>The <code>encountered</code> flag for bestiary entries is now flipped in <code>callEncounter</code> instead of the <code>Enemy</code> constructor.</li>
<li>Added documentation for the bestiary in Additional Features.</li>
<li>Fixed a glitch that prevented bestiary objects from reviving correctly.</li>
</ul>
Version 1.21
<ul>
<li><b>NEW FEATURE:</b> Bestiary/enemy encyclopedia. The code for its construction can be found in <code>database-enemies.js</code>. The bestiary provides highly modular function, with tracking for masking/revealing every single stat, if desired. You can observe it for yourself in a new menu option.</li>
<li>Further compartmentalized the actor display code.</li>
<li>The getter for enemies' <code>fullname</code> attribute will now default to their regular name. This has allowed for some streamlining of the battle display.</li>
</ul>
Version 1.20
<ul>
<li>Added a sticky item for you to test yourself. Start a new game and you'll find three mysterious rings in your inventory. Try them on and see what happens!</li>
<li>Also added a decurse station to let you remove sticky equipment. Pay the cleric 1 GP to appraise an unknown item or to remove a cursed item you've foolishly stuck on yourself.</li>
<li>Fiddled with a few <code>Item</code> properties:
  <ul><li><code>info</code> and <code>desc</code> can now be dynamically modified based on the Item's properties just like with Actions.</li>
  <li>You can now give Items a <code>fakeName</code> property, which will display in place of its real name until the item's <code>known</code> attribute is flipped to <code>true</code>. This is handy for hiding cursed items from the player.</li>
  <li>To facilitate the above, Items' database pointer is now a separate property, <code>id</code>, from its display name. Use <code>id</code> for any code operations that require drawing from the database, and <code>name</code> for any time the item's name is being displayed to the player.</li>
  <li>Renamed the <code>cost</code> property to "value" to avoid confusion with Actions' <code>cost</code> property. <b>Any custom code made in previous versions will need to be updated accordingly.</b></li></ul></li>
<li>You can now unequip items from the equipment screen without selecting a specific character again.</li>
<li>Sticky items can no longer be removed by replacing them with equipment from the same slot.</li>
<li>As part of the above, sticky equipment can no longer be removed with the <code>unequip</code> function by default. Pass an <code>unsticky</code> property to the <code>mods</code> argument to do so.</li>
<li>The equipment and inventory lists now have their own scrollbars, so you won't lose track of your selection when you're scrolling through long lists anymore.</li>
<li>The item shop (and the new decurse station) now use <code>live</code> and <code>update</code> to display your item points, for neatness.</li>
<li>Cleaned up some of the HTML in the menu screens. Several elements that were hardcoded are now defined as CSS classes, and the display code for actor blocks has been condensed into one widget with modular functionality. <b>This required changing some widget names, so custom menu code made in previous versions may be incompatible.</b></li>
<li><code>setInv</code> is now called in <code>user storyinit</code>. A blank inventory is still automatically initialized in StoryInit.</li>
<li>Fixed a bug in the inventory screen that stopped hotkeys from working if an item was selected after using or equipping another item.</li>
</ul>
Version 1.19
<ul>
<li>Accessibility features added: You can now change the default font to OpenDyslexic for easier reading with dyslexia, and change the link color if you have a condition that makes it difficult to pick out blue. <b>If you have one of these conditions, please tell me if these options are helpful and suggest changes if they are not.</b></li>
<li>Tweaked the link mouseover color to be a bit less bright.</li>
<li>Finally fixed the weird background color glitching when selecting input fields. It should now display black text on a white background, like everything else in the bleached style.</li>
<li>Changed the input field for spell costs to <code>numberbox</code> for ease of use.</li>
</ul>
Version 1.18
<ul>
<li><b>NEW FEATURE:</b> Equipment locking. If you set the <code>lockEquipment</code> attribute on a Puppet, the player will be unable to change their equipment. Note that you can still alter their equipment through manual <code>equip</code> and <code>unequip</code> executions.</li>
<ul><li>Specific equipment can also be locked. If its <code>sticky</code> attribute is truthy, you can put it on, but you can't take it off! Perfect for cursed items and the like.</li></ul>
<li>The equip-from-inventory screen is now neater, with characters who can't equip the selected item not appearing at all.</li>
<li>Color of Defeat is now restricted to Artist, purely for ease of testing the restriction mechanic.</li>
<li>It should no longer be possible to bypass an equipment restriction by equipping the item from the inventory screen.</li>
<li>Character names should no longer disappear when listed in the inventory screen.</li>
<li><code>checkRestriction</code> has been reversed, and is now called on an Actor with an Item as an argument. The Item-centric version still exists, but will be depreciated.</li>
<li>You can now hide specific core stats, preventing them from being displayed in the menu or status pane. To do so, add the stat name to the <code>setup.hiddenStats</code> variable in <code>stat class.js</code>.</li>
<li>Renamed the <code>inv</code> variable to <code>inventory</code> for clarity. The shorthand <code>inv()</code> still works.</li>
<li>Moved the definition for <code>V</code> to support functions.</li>
<li>Reorganized the code for the party menu to be a bit easier to use. Stat display code is now standardized to one template passage, and <code>equipmentlist</code> is now a passage rather than a widget.</li>
</ul>
Version 1.17
<ul>
<li><b>NEW FEATURE:</b> Miss chance and critical hits, even though I hate them. Default rates are defined in StoryInit, and custom rates can be defined in an action's definition. See the <code>accuracyCheck</code> and <code>critCheck</code> widgets added to "Damage and Formulas" for more details. By default, these are turned off (set to always-accurate and 0% respectively).</li>
<li>Added support for attacks with mulitple elements. To do this, assign an array of element names (as strings) to the action's <code>element</code> property. Set the <code>AVERAGE_ELEMENTS</code> variable in StoryInit to determine if you want the calculation to average each element, or to just find the best one.</li>
<ul><li>To demonstrate this new feature, Artist has gained four new attacks with multi-element properties.</li></ul>
<li>Improved the getter for Actions' <code>element</code> property. It will now log an error if the element is not in the element list, and it will return <code>null</code> if an illegal datatype was assigned to the property.</li>
<li>Renamed the <code>invisible</code> property of Actions to <code>silent</code>.</li>
<li>Element messages no longer have hardcoded trailing spaces. The trailing space is now automatically added to all element messages in <code>damageCalc</code>.</li>
<li>Renamed the <code>min_dmg</code> variable with ALLCAPS for consistency with other constant variables.</li>
<li>Renamed <code>call</code> to <code>callEncounter</code> for clarity.</li>
<li>You can now specify the splash damage cut value and provide an extension for <code>grenade</code>.</li>
<li><code>grenade</code> renamed to <code>splashDamage</code>.</li>
<li>Added specification notes to Action properties.</li>
</ul>
Version 1.16.1
<ul>
<li>Moved the encounters database to passages-unique.</li>
<li><code>randomtarget</code>, <code>echodamage</code>, <code>damagecalc</code>, <code>addeffect</code>, and <code>dispeltarget</code> have been renamed with camelCaps for better consistency and clarity.</li>
<li>Renamed the <code>cure</code> function to <code>removeEffect</code> and added modifiers to specify removal of ailments only, buffs only, or all effects.</li>
<li>It is now possible to pass an "all" selector to targeting functions, which will cause the action to affect all characters on the battlefield (puppets and enemies).</li>
<li><code>Actor.removeEffect</code> now has an argument that enables the removal of all instances of a stackable effect.</li>
<li>Debuff cure items now remove all instances of their respective debuffs.</li>
<li>Fixed a bug in the effect of Canned Air.</li>
<li>Fixed several bugs in <code>removeEffect</code>.</li>
<li>Tweaks made to <code>Actor.removeEffect</code> and <code>Effect.decay</code> for more consistent line spacing.</li>
<li>Several tweaks made to action functions to enable better chaining.</li>
<li>Several actions have been rewritten to use action functions instead of the original custom code.</li>
</ul>
Version 1.16
<ul>
<li><b>NEW FEATURE:</b> Shock cures. It is now possible for direct damage to cure certain status effects. Add a "shock" property value to the status effect to enable this. It can be either <code>true</code> for a guaranteed cure every time, or an integer value between 1 and 100 equal to the chance of cure <s>if you're a filthy randomizer</s>. None of the default effects use this feature at the present time.</li>
  <ul><li>As a corollary, you can now set a <code>noShock</code> property for actions if you do not wish for them to trigger shock cures.</li></ul>
<li>File extensions have been converted from <code>.twee</code> to <code>.tw</code> to enable compatibility with Atom's SugarCube interpreter. Hopefully this will not cause problems.</li>
<li>Updated documentation.</li>
</ul>
Version 1.15.2
<ul>
<li>Moved the puppets definition from the default <code>StoryInit</code> to the custom passage.</li>
<li>Updated documentation for changes to the effect adder.</li>
</ul>
Version 1.15.1
<ul>
<li>Fixed an error that prevented actions with <code>displayname</code> from working as intended.</li>
</ul>
Version 1.15
<ul>
<li><b>NEW FEATURE:</b> Turn exchange. If this variable is set in <code>StoryInit</code>, an enemy will automatically act after every player action. This is useful if you don't want players ganging up on enemies.</li>
<li><b>NEW FEATURE:</b> You can now set any action as a puppet's default action in the status menu, provided it does not have the <code>noDefault</code> property.</li>
<li><b>NEW FEATURE:</b> You can now customize the appearance of your save game displays! See the documentation and the <code>saves-modifier.js</code> file for details.</li>
<li>There is now a link to the party menu on the sidebar, in case the hotkeys don't work.</li>
<li>The commands menu will no longer continue to display after selecting a command. This should hopefully make playing with the mouse a little easier.</li>
<li>The functionality of number hotkeys has been moved to a widget, <code>numKey</code>, and can be found in <code>Widgets (Misc)</code>. This will allow you to change the behavior of all number keys by just altering one block of code.</li>
<li>The "last action" notification in battle now says what the last action is, and does not display at all if there isn't one.</li>
<li>The action list display has been revamped. By default, it now displays only the action names and their EN cost, with additional information appearing on mouseover. (For mobile users, you can return to the old display through an option in the Settings menu.) Additionally, the action list is now contained to a fixed height, and gains a scrollbar if the text exceeds that height. (This should prevent it from overflowing the viewport on most monitors.) This can be changed by modifying the <code>actionList</code> ID in <code>battle display.css</code>.</li>
<li>Fixed some unterminated class and function expressions.</li>
<li>Fixed several bugs in the action functions that used <code>findTarget</code>. They should now work more intuitively, and you no longer need to wrap them in a double-function call on the database end.</li>
<li>Protector should work again.</li>
</ul>
Version 1.14.3
<ul>
<li>Fixed an error in <code>applyEffect</code>. Single-target actions should no longer hit the whole party.</li>
<li><code>addEffect</code> will now generate an error message if no arguments are passed to it.</li>
<li>Knocked Down applications should no longer create an error.</li>
<li>Knocked Down should now correctly <i>decrease</i> Defense, instead of increasing it.</li>
<li>Fixed some text glitches in the previews of "struggle" and "rest" actions.</li>
<li><code>actions_this_turn</code> should no longer generate an error when an enemy uses an ally-targeting skill.</li>
<li>Exclusive effects should now be properly applied again.</li>
</ul>
Version 1.14.2
<ul>
<li>It is no longer possible to set an action's uses to more than its max uses.</li>
<li>Fixed a naming error in the function for resetting action cooldown. Cooldowns should be correctly reset now.</li>
<li>Added <a href="https://daneden.github.io/animate.css/" target="_blank">animate.css</a>.</li>
<li>The background music now requires the user to click a link instead of playing automatically.</li>
</ul>
Version 1.14.1
<ul>
<li>The engine is now completely independent of Twine! The <code>StoryData</code> passage is now used to store necessary project data. Remember to edit it when making your own project. (Remove the <code>StorySettings</code> passage to generate your own IFID.)</li>
<li>Removed <code>Effect Adder-modded</code>.</li>
<li>Fixed several errors in the effect adder and the <code>Action.displayname</code> getter.</li>
</ul>
Version 1.14
<ul>
<li><b>NEW FEATURE:</b> Loss-of-control effects. These effects will force your puppets to attack randomly at the start of a round, like "berserk" or "confusion" effects in most RPGs. There are now three new effects in the effect database to let you test this for yourself: "Hatred" forces the puppet to attack enemies, "Charmed" forces the puppet to attack its allies (potentially including itself), and "Confusion" can make the puppet target anyone on the field.</li>
<li><b>NEW FEATURE:</b> Battle grids. You can now display parties in a 3-by-3 grid on the battlefield. By default, characters in higher rows will guard lower ones, protecting them from direct attacks; you can implement other features as well. Set the <code>BATTLE_GRID</code> variable to <code>true</code> in StoryInit to enable this feature, but mind the instructions in the documentation. An additional menu pane for altering the formation of your characters has also been added. Helper functions have been added to <code>1_support-functions.js</code> to assist, allowing you to easily call parties excluding empty slots. (Thanks to A Friendly Irin for providing this code.)</li>
<li><b>NEW FEATURE:</b> Cooldown! You can now set a cooldown (and warmup) property for actions.</li>
<li><code>enemytarget</code> has been tweaked for compatibility with loss-of-control effects. As it can now be called by puppets as well, it has been renamed <code>randomTarget</code> for clarity.</li>
<li><code>echoDamage</code> has been tweaked to avoid triggering counters and damage reflection if an attacker targets itself with an attack.</li>
<li>Mark and Hunter attacks will no longer trigger if the hunter is uncontrollable.</li>
<li><code>refreshPuppets</code> will now automatically remove sticky effects.</li>
<li>The <code>trigger</code> property has been tweaked: It is now designed as a function that returns <code>true</code> if the counter should trigger, offloading functionality into the specific counters themselves. By default, it now returns <code>true</code>, meaning an undefined trigger will always activate the counter.</li>
<li>Added new <code>formula</code> property for actions, allowing users to specify unique damage formulas.</li>
<li>Added new <code>useSpecial</code> property for actions. This is a number between 0 and 1 that determines the proportion of base damage affected by the Special stat as opposed to the Attack stat. By default, this is set to 1 for attack items. See the updated <code>damageCalc</code> function for details.</li>
<li>Actors' stat getter function now returns 0 if the stat could not be found. This ensures that your game will run smoothly with the new damage calculation code even if you do not use the Special stat.</li>
<li>Offloaded the special functionality for Exacerbate and Downfall into functions tied to the actions themselves. This, combined with the <code>useSpecial</code> functionality, has made the "damageCalc special actions" passage obsolete, and it has been removed.</li>
<li>Cleaned up the action getters by making the lookup with <code>displayname</code> part of the basic <code>actionData</code> getter instead of manually inserting it into each getter.</li>
<li>Defined a "wait" action for enemies that allows them to delay their turn until later in the priority order.</li>
<li><code>actions_this_turn</code> is now a property of the battle controller, and tracks the actions of <i>all</i> the enemies during the round, not just the current enemy. This allows you to have enemies react to other enemies' behavior.</li>
<li>New widget: <code>populateEnemies</code>. This allows you to more quickly generate enemy parties by just passing the names of each enemy. (Thanks to A Friendly Irin for providing this code.)</li>
<li><code>massAttack</code> has been improved with support for row, column, and adjacent attacks if the battle grid is enabled.</li>
<li>Added new <code>pushAttack</code> action function that moves characters on the battle grid.</li>
<li>Added getters for Actors' row and column locations.</li>
<li>Support functions such as <code>getActor</code> have been split into a separate file, <code>1_support-functions.js</code>. Several functions for the aiding of battle grids have been added, plus a function that converts numbers to words.</li>
<li>The status pane now scrolls vertically with the user's viewport.</li>
<li>Fixed a problem with some of Cleric's abilities.</li>
<li>Status buttons now have a small left margin to give them a buffer against long character names.</li>
<li>Fixed an error in <code>playMusic</code>.</li>
</ul>
Version 1.13.2
<ul>
<li>Getters for Effects have been remade with greater specificity. It is now possible to override Boolean flags with <code>false</code>.</li>
<li>The "persistent" property for effects is now split into <code>persistAfterDeath</code> and <code>persistAfterBattle</code> for greater modularity. <code>refreshPuppets</code> now only removes effects that do not <code>persistAfterBattle</code>.</li>
<li><code>Effect.decay</code> should now be able to remove sticky effects.</li>
<li><code>refreshPuppets</code> now only refills action uses if the <code>actionRefillAfterBattle</code> variable is <code>true</code>. By default, it is set to <code>true</code>.</li>
<li><code>deathcheck</code> will now remove sticky effects from defeated characters.</li>
<li>Added links to SugarCube language definitions and Chapel's custom macros in the installation help page.</li>
</ul>
Version 1.13.1
<ul>
<li>Added a section in Design discussing targeting systems.</li>
<li><code>endofbattle</code> now unsets the battle controller and the enemy party variable to reduce overhead.</li>
<li>Added <code>fight</code>, <code>playMusic</code>, and <code>clearMusic</code> macros (thanks to A Friendly Irin for providing this code), and the <code>typewriter</code> macro to <code>Widgets (General)</code>.</li>
<li><code>addItem</code> now has a handler preventing item stacks from going over an <code>ITEM_MAX</code> variable. By default, this is set to 9.</li>
<li>Added the <code>itemDrop</code> macro from <i>Cartoon Battle</i>. Sorry, I thought I already added this one!</li>
<li>Implemented support for enemy item drops.</li>
<li>The variable names for struggle cost, berserker factor, and defender factor have been changed to allcaps for consistency with other constant variables.</li>
<li><code>LevelUps</code> is now initialized to an empty array in <code>StoryInit</code>. This should prevent later errors.</li>
<li><code>refreshPuppets</code> has been moved back to the default end of battle code, but has been given additional handlers if lasting damage is desired.</li>
<li><code>deathcheck</code> now adds the entire enemy object to the <code>kills</code> array, instead of just the name. This will allow you to access more attributes of defeated enemies as desired.</li>
<li>The info text for Defender now correctly refers to the defend factor, not the berserk factor.</li>
<li>Updated documentation.</li>
</ul>
Version 1.13
<ul>
<li><b>NEW FEATURE:</b> Aggro targeting! There is now a system for making enemies preferentially target characters based on how much damage they've inflicted. Set the <code>THREAT_TARGETING</code> variable to <code>true</code> in <code>StoryInit</code> to activate it. (Thanks to A Friendly Irin for providing this code.)</li>
<li><b>NEW FEATURE:</b> Limited-use actions. You can now define an action as having a hard limit of uses per battle. By default uses are refilled after battle, but you can change this if you wish. (Thanks to A Friendly Irin for providing this code.)</li>
<li>The <code>enemytarget</code> widget has been streamlined and modified to incorporate threat targeting.</li>
<li>The name of your game's currency can now be set in <code>StoryInit</code> and will display any time currency is referenced. By default, the name is "GP".</li>
<li>Added getters for assigning XP and GP rewards to enemies.</li>
<li>Added getters for <code>growthRates</code> and <code>StatTable</code> for Puppets.</li>
<li>Added a getter and setter for the <code>dead</code> property that automatically resets respawn and threat values when appropriate.</li>
<li>Added a Puppet method function: <code>hasAction</code>. This checks if the Puppet has an action of the given name.</li>
<li><code>deathcheck</code> now adds defeated enemies' XP and GP rewards to the battle total.</li>
<li>Puppets now have kill and defeat counters that are incremented in <code>deathcheck</code>. They aren't currently displayed anywhere, but they're there if you want to use them.</li>
<li>The party menu now displays the player's GP.</li>
<li>Implemented a more robust victory handler. The victory screen now displays XP and GP rewards, displays the effects of any level ups, and auto-forwards the player to a passage that can be specified in the encounter definition but defaults to the passage the battle was entered from. (Thanks to A Friendly Irin for providing this code.)</li>
<li>The default level up handler is now neater and more robust.</li>
<li><code>levelRate</code>, <code>growthRates</code>, and <code>StatTable</code> have been changed to database properties, accessed through Puppet getter functions.</li>
<li><code>endofbattle</code> now sets a flag recording that the encounter was fought. You can access these flags through the <code>encounters</code> variable.</li>
<li><code>deathcheck</code> will now remove effects only if they <i>aren't</i> persistent, not only if they are.</li>
<li>The check for legal action use has been moved from the hotkey code into the {{{<<actionLink>>}}} macro directly.</li>
<li>The Q key now triggers the link in the confirm phase rather than just forwarding the player to the action phase. This is useful if you want the confirm link to perform additional code.</li>
<li>The code for <code>actionList</code> now looks a bit neater.</li>
<li>Fixed a broken link in Design.</li>
<li>Updated documentation.</li>
</ul>
Version 1.12
<ul>
<li><b>NEW CHARACTER:</b> The Artist. This character was created purely to explore the elemental affinities system, and is not intended to be balanced. Try them out on the Mystery Twins!</li>
<li>Actors have now been converted to a database structure. This should make runtime more efficient and facilitates the construction of in-game lists such as a Pokedex or bestiary.</li>
<li>Implemented "advance turn" functionality that allows you to space out enemy turns within a round. (Thanks to A Friendly Irin for providing this code.)</li>
<li>Implemented support for "ambush" encounters where the enemy takes the first round.</li>
<li>Implemented support for "full-round" enemy actions that take up all of the enemy's remaining attacks, as well as a corresponding getter function in the Action class.</li>
<li>Implemented support for damage reflection. (Thanks to A Friendly Irin for providing this code.)</li>
<li>Implemented support for counterattacks. (Thanks to A Friendly Irin for providing this code.)</li>
<li>Implemented support for puppet respawns.</li>
<li>Added a new Stat subclass, <code>FillStat</code>. This class is for stats that contain both a current and maximum value that can be exhausted and refilled, such as tolerances.</li>
<li>Rehauled action functions with greater functionality and documentation. In particular, the <code>massAttack</code> function can now function as a vanilla area-of-effect attack. <b>Note the warning in the new <code>findTarget</code> function.</b></li>
<li>Added a <code>heal</code> function, for those weirdos who want players to be able to recover HP.</li>
<li>You can now mask the stats of enemies in the status screen by flagging a <code>maskstats</code> attribute.</li>
<li>Main stats are now kept in a generic object, not a Map. This should make them more accessible in code.</li>
<li><code>setHP</code> depreciated; the <code>hp</code> property now has a proper getter and setter.</li>
<li><code>damageCalc</code> now accepts a custom target like <code>echoDamage</code>.</li>
<li>Added several additional getters for Action objects.</li>
<li>Implemented a getter and setter for the <code>en</code> property that bounds it between 0 and <code>maxen</code>. This allowed for the removal of the loop that otherwise accomplished this in PassageReady.</li>
<li>Implemented a new method function for <code>Actors</code>: <code>hasEquipped</code>. This will return <code>true</code> if the character has the equipment specified in the argument. (Thanks to A Friendly Irin for providing this code.)</li>
<li>Moved the code for displaying player commands to its own passage for greater modularity.</li>
<li>Offloaded elemental hit messages to a variable defined in {{{StoryInit}}} so users can more easily modify them.</li>
<li>Hunter counterattacks will now only trigger once for enemies that take multiple actions in the default code.</li>
<li>Prone characters should be able to be selected again.</li>
<li>Fixed a glitch that prevented buffs from displaying their removal message.</li>
<li>Elemental immunities should now actually result in 0 damage rather than the minimum damage value.</li>
<li>Actions should no longer be disabled if a character has 0 HP and is somehow still acting unless the action has a defined <code>hpcost</code> value.</li>
<li>Added a section in Design explaining HP and hit-to-kill ratios.</li>
<li>Updated documentation to reflect changes.</li>
</ul>
Version 1.11.1
<ul>
<li><b>Enemy attack order can now be customized.</b> Instead of enemies always acting in index order, you can give them a <code>priority</code> property to determine who acts in what order. Enemies will act in ascending priority value. Enemies will still act in index order by default.</li>
<li><code>hunterCheck</code> now resets the active target, subject, and action back to the originals after the counter is finished. Additionally, support for enemy hunters and multiple hunters within each party has been added.</li>
<li>The call to <code>hunterCheck</code> now takes place in "custom end of action effects", for greater modularity and to facilitate enemy hunters.</li>
<li>Support for enemy instant actions has been added: If an enemy uses an action with the <code>instant</code> property flagged to <code>true</code>, it will not end their turn. Obviously, be careful to avoid infinite loops with this.</li>
<li>Enemies with multiple attacks will no longer continue to act if they die or are stunned in the middle of their turn.</li>
<li>New property for effects: <b><code>persistent</code></b>. If flagged <code>true</code>, the effect will persist even after the character is defeated.</li>
</ul>
Version 1.11
<ul>
<li>Redid the getter functions for Boolean attributes of actions. They are now more robust, and will correctly return <code>false</code> or <code>null</code> if you set the override property to that value.</li>
<li>Added a new getter for actions: <code>displayname</code>. This is used for when you want the name that displays in the action list to be different than the name given in the code. (Thanks to A Friendly Irin for providing this.)</li>
<li>The mute button now uses icons rather than the word "MUTE". These icons were taken from <a href="https://material.io/" target="_blank">Material Design</a>.</li>
<li>Battle styling is now tied to a string variable, <code>B.style</code>, rather than Booleans. If you enter a string for <code>B.style</code>, the page will gain that class.</li>
<li>Battle styling code has now been moved to the main "Preparation" passage.</li>
<li><code>justeffect</code> and <code>dmgandeffect</code> have been condensed into one function, <code>applyEffect</code>. The code has been reworked to more easily accommodate applying multiple effects at once: just pass an array of names to the "type" parameter instead of a single string. Additionally, a new parameter has been added that can be flagged to make the applied effects pierce tolerance.</li>
<li>New action function: <b><code>multihitCustom</code></b>. This function makes it easier to implement more complex multi-hit abilities. Look at the action functions code to see it in full.</li>
<li>New helper function: <b><code>deadCount</code></b>. This returns the number of puppets currently flagged dead. It is located in 0_config.js.</li>
</ul>
Version 1.10.4
<ul>
<li>So apparently, all this time I forgot to make enemy protectors actually protect people. This has now been corrected.</li>
</ul>
Version 1.10.3
<ul>
<li>Status effects will no longer use an incorrect plural for their remaining duration if the duration is only 1 turn.</li>
<li>Ending a dark-styled battle will no longer result in a "flicker" before transfering to the next passage. (Thanks to A Friendly Irin for figuring this one out.)</li>
<li>Re-applying an effect should no longer produce a blank line.</li>
</ul>
Version 1.10.2
<ul>
<li>Fixed a bug in the command functionality from the 1.09 update. Command buttons should no longer link you to the wrong characters' actions.</li>
<li>It is now once again possible to target allies with ally-targeting skills.</li>
<li>Updated the link to the Tweego installer in the installation guide. It should hopefully link to a valid page now.</li>
<li>Steven should no longer generate an error when he's defeated.</li>
<li>The Crystal Gems will now protect Steven as they do in <i>Cartoon Battle</i>.</li>
</ul>
Version 1.10.1
<ul>
<li>Modified <code>addEffect</code> for better readability and versatility. It will now bypass the power calculation branches if you do not use the Special stat in your game, preventing potential glitches. It has also been changed to a proper skeleton model with specific <i>Cartoon Battle</i> elements removed, though this means it is overwritten by a modified version in passages-unique that will have to be removed if you want to make changes.</li>
<li>The quit button is now displayed in battle again. It is now tied to <code>actorlist puppets</code> rather than <code>commands</code>.</li>
<li>Added the championship enemies to the enemy database, if you'd like to see how their AI was constructed.</li>
<li>Removed some console logs in the code that were left over from testing.</li>
<li>Updated documentation to reflect changes.</li>
</ul>
Version 1.10
<ul>
<li>HP regeneration and elemental affinities now have support for both flat and percent-based attributes. Status screens have been updated to display both types, but if you don't plan to use flat rates, you can hide them from the display by modifying the <code>SOAK</code> and <code>FLAT_REGEN</code> variables in StoryInit. <b>You will need to remake any Actor objects for earlier saves to be compatible with this update.</b></li>
<li>Added new Actor method functions:</li>
<ul>
<li><code>regenHP</code>: Runs flat and proportional regeneration simultaneously.</li>
<li><code>getElement</code>: Allows you to specify whether you are getting the flat or porportional elemental affinity. You may also leave the second argument blank to get the raw object.</li>
</ul>
<li>The Map versions of <code>addMod</code> and <code>removeMod</code> now include support for an additional argument specifying whether the mod should be applied to flat or proportional.</li>
<li>Items now use object cloning for <code>clone</code> and <code>toJSON</code>. This should correct a bug with unequipping stacked accessories negating the mods from all accessories.</li>
<li>Menu widgets have been moved to the <code>party menu.twee</code> file for easier reference. The previous file has been renamed to <code>Widgets (Misc)</code> and contains widgets for status pane displays.</li>
</ul>
Version 1.09.1
<ul>
<li><code>addEffect</code> now works when passed an effect name, not just an Effect object. You can use it just like the Effect constructor: name first, then duration, then power.</li>
<li>Fixed a potential error that could occur if <code>chain</code> attempted to run with an undefined target, subject, or actor.</li>
</ul>
Version 1.09
<ul>
<li><b>Rehauled battle character displays.</b> It should now be possible to have party sizes extend to multiple lines without issue. The command panes will no longer be displayed in the initial battle map; instead, you will select a character by clicking on their name or pressing their hotkey, and the party display will be collapsed to just them and their command pane. Done/Stunned notifications will now display at the bottom of the actor boxes instead of in the command panes.</li>
<li>The cancel button is now R, to avoid interference with the E key also being the item command hotkey.</li>
<li>During the targeting phase, the party not being targeted will now be hidden from view.</li>
<li>The battle map is now hidden during the command phase.</li>
<li>New feature: <b>automatic turn ending</b>. Enable this in the settings menu to end your turn automatically when all characters have acted.</li>
<li>Fixed a text glitch in Focus.</li>
</ul>
Version 1.08.5
<ul>
<li>UI text should now display correctly even if the default text color has been changed through in-game modifications.</li>
<li>Effects with no removal text will no longer force the player to click through the end-of-round passage.</li>
<li>Actions now have a getter for the <code>nosave</code> property.</li>
</ul>
Version 1.08.4
<ul>
<li>The default add and remove text for effects should now display correctly.</li>
<li>Protector should no longer create an error message on removal.</li>
<li>Actions that disallow self-targeting should now work correctly; the property has been renamed to <code>noself</code> for greater clarity, and an appropriate getter has been added.</li>
<li>The setup for the damage formula type and min stat values has been moved to the custom StoryInit section; if that assignment is in the default, min stat values won't auto-update if you change the formula in the custom StoryInit.</li>
<li>Added a <code>RESPAWN_HP</code> variable you can set in StoryInit. This will determine the proportion of HP a respawned character revives at. By default, it is set to 1.</li>
<li>Moved the special checks passage to passages-unique.</li>
<li><code>actionLink</code> now works for items as well.</li>
</ul>
Version 1.08.3
<ul>
<li>Moved hotkey definitions to their own passage for greater modularity and neatness of code.</li>
<li>The call to the Special stat for item usage in the damage formula has been moved to "damageCalc custom factors" for greater modularity, in case you don't want items to use the Special stat (or don't want to have a Special stat at all).</li>
<li>The code that runs when selecting an action has been outsorced to a widget, <code>actionLink</code>. This widget is now called for both the link itself and the hotkey shortcuts for actions, enforcing consistency between the two.</li>
<li>Action's <code>toJSON</code> now clones the entire object instead of creating a new object with just the name. This is useful if you want unique action properties to persist.</li>
<li>Fixed a typo in Battle Phases. Targeting should now work correctly if an enemy is both untargetable and a martyr.</li>
</ul>
Version 1.08.2
<ul>
<li>Equipping a new item to a filled equipment slot will now replace the last subslot rather than the first. I felt this was more intuitive.</li>
<li>Mass status effect abilities now assign the current target to <code>$target</code>. This helps if you want to do something that depends on that.</li>
<li>The action phase no longer checks to see if {{{$action.act()}}} evaluates to <code>null</code>. This was causing a problem where the <i>entire</i> function was being run in the check, not just evaluating the result. Actions were effectively run twice if they contained anything before the <code>return</code> statement. If you want the box to disappear, you will need to set the <code>act</code> property itself to <code>null</code>.</li>
</ul>
Version 1.08.1
<ul>
<li>It is now possible to equip multiple items of the same type. Puppets now have 2 Accessory slots, and you can test this functionality for yourself with the new "Color of Defeat" item.</li>
<li>The unequip buttons have been removed from the full party view due to the discovery of a bug involving them.</li>
</ul>
Version 1.08
<ul>
<li>Actions and effects have now been converted to Flyweight format. This leads to a few changes in how certain attributes are defined; see documentation for details.</li>
<li>Constants such as <code>$STATUS_SCREENS</code> have been changed to attributes of <code>setup</code>. This will allow changes to persist through game version changes.</li>
<li>Stat mods have been completely redone, such that changes to equipment will now correctly carry over between save game version changes. (Thanks to Akjosch for helping me with this.) <b>This change is likely not compatible with previous versions unless you completely remake your <code>Actor</code> objects.</b></li>
<li>The menu screens no longer have a border. I felt this was more aesthetically pleasing.</li>
<li>The <code>unequip</code> function must now be explicitly passed a <code>destroy</code> value of <code>true</code> to destroy equipment, instead of any truthy value.</li>
<li>The Status pane of the party menu now uses a widget, <code>statusDisplay</code>, to display the common portion of the normal and detailed status displays. The widget can be found in <code>Widgets (Menu)</code>.</li>
</ul>
Version 1.07
* <b>The party menu has been rehauled to include the full functionality expected of a typical RPG!</b>
** Added a status screen that shows the party's HP, MP, and experience levels. Clicking on one character will provide detailed stat, equipment, and ability information.
*** The detailed status screens are tied to the {{{$STATUS_SCREENS}}} variable, which has been changed to a generic object with two attributes to distinguish between the status screens visible in the menu and the status screens visible in battle. <b>If you have already made a project with an earlier version of the engine, you will need to update this variable in your {{{onLoad()}}} function to avoid errors in existing save games.</b>
*** Stat objects now contain tooltips that explain what the stat does. These can be seen in the detailed status pane.
** Added an inventory screen that lists all inventory items and allows you to view detailed information about each.
** The equipment screen has been redesigned to give a nicer appearance more consistent with the new status screen. The unequip buttons now have consistent positions, as well.
** The menu navbar has now been changed to a vertical display on the right, instead of a horizontal display across the top. This frees up more room for the status screens.
** You can add additional screens modularly by adding entries to the {{{$MENU_OPTIONS}}} variable. <b>If you have already made a project with an earlier version of the engine, you will need to update this variable in your {{{onLoad()}}} function to avoid errors in existing save games.</b>
* Music can now be muted and unmuted with the M key.
* A peppy theme tune now plays while navigating the help file to show off the sidebar music display. Don't worry -- you can mute it with the newly-added hotkey if you prefer silence!
* Added an entry on designing the AI for <i>Cartoon Battle</i>'s Bonnibel in the documentation section.
* Added a note about damping in divisive damage systems in the design section.
* Fixed a typo that created a fatal error in the level up data for puppets.
* Changed the way status screen customization works to be more modular. Cycling is now tied to the length of the {{{$STATUS_SCREENS}}} array, and the displayed pane is based on the content of the array element rather than hardcoded to specific {{{$stScreen}}} values.
* The structure of the item database has been reworked to incorporate Flyweight design principles. This should hopefully speed up the game. (Thanks to Akjosch for help with this.)

Version 1.06.4
<ul>
<li><code>custom end of action effects</code> is now called at the end of enemy actions, not just player actions. This allows you to have events related to enemy actions as well.</li>
<li>Added a default music display in the UI bar should you wish to use it. Remember to properly attribute your media if you are using it under a Creative Commons license.</li>
<li>Protector SHOULD now be removed when the protected character dies, for real this time, probably, maybe, or possibly this bug will continue to be the bane of my existence. We'll find out.</li>
<li>Enemies will no longer perform glitched actions if all puppets are dead when they attempt to find a target.</li>
</ul>
Version 1.06.3
<ul>
<li>Fixed the party selection glitch. You can no longer add an extra puppet to the active party by double-clicking on an active puppet.</li>
<li>Changed the party selection screen to display the reserve in the main pane instead of the sidebar.</li>
<li>Respawn mechanics added. If you give a character a <code>respawn</code> value at creation, it will be decremented every round. When it hits 0, the character will be revived in <code>endofround</code>. By default, characters are revived to full HP, but this can be changed.</li>
<li><code>endofbattle</code> now has a modular component. The calls to <code>refreshPuppets</code> and <code>restock</code> have been moved there to more easily remove them if they are undesired.</li>
<li><code>newturn</code> now has a modular component. The code for Energy regeneration has been moved there to more easily enable switching to a different type of resource system.</li>
<li>Passage jump actions now work correctly.</li>
<li>Tweaked the actor blocks slightly. Their borders are now twice as thick; only the borders are highlighted upon selection; and the selection color is now a darker blue. This will hopefully result in selection looking less garish, especially in dark-themed passages.</li>
<li>Action phase modularity is now more robust; the components will now be hidden both in the case that the value is <code>null</code> <i>and</i> in the case that the value is a function that evaluates to <code>null</code>.</li>
<li>The checks for Protector and Martyr in the targeting logic have been compartmentalized into their own widgets.</li>
<li>Added documentation on delayed attacks.</li>
</ul>
Version 1.06.2
* New circumstantial modifiers for enemies:
** <b>hidden:</b> If you flag this attribute, the enemy won't get a stat block generated in <code>actorlist</code>, making it invisible to the player. Note that this means there is no way to target it, either. Hidden enemies are not excluded from the victory condition check, so if you use this, you should make a special victory condition or give the player some way to damage the enemy.
** <b>immortal:</b> If you flag this attribute, the enemy will not die when they are killed. They'll still produce a death message, but their "dead" flag will not be flipped to <code>true</code>. This is useful if you want to replicate a feature like the final battle of <i>EarthBound</i>, where the enemy cannot be defeated through normal means.
** <b>fakedeath:</b> If you flag this attribute, the enemy will not take an action during their turn (even to say they are stunned), as if they were defeated. Effect decay will still occur as normal, however. This is useful if you want certain enemies to "play dead" or just if you want them to skip turns.
* Defeated enemies will now produce no death message if you set their <code>deathMessage</code> attribute to <code>null</code>.
* The <code>removeEffect</code> function now has a shortcut for removing a specific type of effect. If you pass it a string rather than an effect object, it will remove the first effect whose name matches the string. Note that this only removes the first instance it finds, so it won't clear multiple instances of stackable effects.
* You can now use actions to move the player to a new passage by setting the <code>passagejump</code> attribute to <code>true</code> and setting the <code>phase</code> attribute to the name of the desired passage. This is useful if you want to incorporate passage mechanics into your battles, such as allowing characters to interact with the objects in a room to produce changes to the battle.

Version 1.06.1
<ul>
<li>Removed Chapel's cycles system due to its potential to cause a fatal error.</li>
<li>Added hotkey support for all-targeting abilities.</li>
<li>Added a hotkey for party menu access, though the party menu is rudemantary at the moment.</li>
<li>Last action is now remembered upon selection, not just use. This should hopefully ease the pain of the Back button booting you all the way back to the start of selection.</li>
<li>Enemy reverse display is now handled through a battle variable, allowing it to be tracked more easily.</li>
<li>The special handler for Focus' cost reduction has now been moved to custom end of action effects, to prevent conflicts if you want to create your own action named "Focus".</li>
</ul>
Version 1.06
<ul>
<li><b>Hotkeys are in!</b> Use the number keys to select characters, the Q key to confirm, and the E key to cancel.</li>
<li>The story title area now displays white text as part of the default formatting style, making it easier to read with the dark UI bar. If you want to lighten the UI bar, such as with the normal Bleached style, you will probably want to change this.</li>
<li>Displaying the confirm phase is now optional. This can be toggled in the Settings menu.</li>
<li>Difficulty settings also moved to the Settings menu.</li>
<li>Piercing attacks now set effective defense to 1 instead of 0 if the {{{$formula}}} variable reads "divisive". This avoids a division by zero error in a divisive defense formula.</li>
<li>Special death handling no longer adds a special death passage to the queue if it is already in the queue; this should prevent the player being forced to see the special death passage multiple times if the enemy is killed through a multi-hit attack or other circumstance that triggers <code>deathcheck</code> multiple times.</li>
<li>Fixed the enemy Martyr bug: If an enemy martyr exists, you still have to select them in the targeting phase, but they will be the only viable target. (Additionally, this means you can no longer bypass Martyr with skills that target all characters -- you can still target allies, but the martyr will be the only possible enemy target.)</li>
<li>Martyr now overrides untargetable protection for enemies, as it does for player characters.</li>
<li>You can now select protected enemies as targets, though their protector will still cover them. This encourages players to pay attention to who's protecting whom!</li>
<li>Protector now displays the name of the protector's charge in the info box.</li>
</ul>
Version 1.05.1
<ul>
<li>Added documentation for health bars and the item shop.</li>
<li>Enemy health bars will now be correctly mapped to the number of enemies, rather than the number of puppets.</li>
<li>Enemy health bars are now a slightly darker red. (I felt the default red looked too garish next to the default green.)</li>
<li>Enemy and player health bar colors are now variables set in StoryInit.</li>
<li>Enemy status buttons should no longer display for defeated enemies.</li>
</ul>
Version 1.05
<ul>
<li>The engine now comes bundled with <a href="https://twinelab.net/custom-macros-for-sugarcube-2/" target="_blank">Chapel's custom macros.</a></li>
<li>Relatedly, the battle interface now displays health bars! If you prefer the old look, you can set <code>$SHOW_HEALTHBARS</code> to false.</li>
<li>Created an interface for an item shop! It's a little rudementary at the moment, but it is functional.</li>
<li>Restructured the version updating and save config code. It should hopefully work correctly now.</li>
<li>The HP display will now be hidden if you flag an enemy's <code>maskhp</code> attribute. Additionally, the <code>healing</code> attribute has been renamed to <code>showMaxHP</code> for clarity.</li>
<li>Added additional modularity in <code>damageCalc</code>: The damage formula definition is now a separate passage, as are handlers for actions with special behavior, such as Exacerbate and Downfall.</li>
</ul>
Version 1.04-beta
<ul>
<li>Retweaked the handling for subjects and targets <i>again</i>. They now get the ID value from the current subject/target object itself instead of storing it as a separate variable, which removes the need to call <code>getActor()</code> manually.</li>
<li>The battle passages have been tweaked to support additional modularity. Code for altering the actor list in special cases is now outsourced to another passage that can be edited separately from the main display code; the "Preparation" passage now calls to a separate passage for custom modifications; the Effect Adder outsources protection checks to a separate passage; and you can now set which status screens display in StoryInit.</li>
<li>Targeting AI now includes handlers for bypassing untargetable and protection clauses. Simply pass "ignore untargetable" or "ignore protection" as arguments to the widget, and those characters will be made viable targets.</li>
<li>Spread attacks now bypass untargetability, as in <i>Bonfire</i>.</li>
<li>The effect adder should now correctly identify when it's passed a number for effect power.</li>
<li>The battle controller now checks if an item was used during the round, if that's something you want enemies to react to.</li>
<li><code>SacrificeUsed</code> is now a property of the battle controller, for consistency.</li>
<li>The <code>$power</code> variable, used for constructing effects, has been changed to use a temporary variable instead.</li>
<li><code>victorycheck</code> is now run in the enemy phase. This accounts for the rare case where the player is defeated through damage over time; previously, <code>victorycheck</code> was only run during the player's turn, so the enemy turn would still play out even if everyone was already defeated.</li>
<li>Minor tweak, but it <i>really</i> bugged me: boss names are no longer misaligned with their HP display in the boss box. The display is still misaligned relative to the whole box because the status button still throws off the centering, but this is less noticeable.</li>
</ul>
Version 1.03-beta
<ul>
<li>The handling for the <code>$subject</code>, <code>$target</code>, and <code>$actor</code> variables has been redone to be more intuitive and allow for easier tracking of the original objects. Thanks to Discord member <b>Akjosch</b> for help and directions. See documentation for details.</li>
<li>Enemy cooldown logic is now more intuitive: They will be able to use attacks when the cooldown <i>is</i> zero, rather than requiring the cooldown to be negative. This means that the value you give to a cooldown will now be equal to the number of turns before it can be used again.</li>
<li>Fixed a bug with status effects that had entangled tolerance values (such as Curse and Forsaken). Tolerances should now be reduced and reset correctly.</li>
<li>Puppets are now revived as part of <code>refreshPuppets</code>.</li>
<li>Dispel targeting will now correctly check against the threshold value when targeting a martyr.</li>
<li>Additionally, Martyr, Defender, and Berserker will no longer count towards the threshold check.</li>
<li>Protector should now be correctly removed if the protected character dies, but I have not tested this. Please report any problems you encounter.</li>
</ul>
Version 1.02-beta
<ul>
<li>The default damage constant has been doubled to 80; this should speed up battles significantly. (Keep in mind DoT effects use the same constant.)</li>
<li>There is now support for enemies taking multiple actions per turn. Set the <code>noAttacks</code> attribute in an enemy object if you wish to use it. As this is a new feature, it may result in unforseen problems; please report any bugs you find.</li>
<li>There is now support for modifying the CSS of battles. See documentation for details. A "dark" format that returns to the default SugarCube style is provided in the CSS files.</li>
<li>The default style has been changed to a modified form of the Bleached style. The background is slightly less bright, links are easier to see on the white background, and UI messages will now be more readable.</li>
</ul>
Version 1.01-beta
<ul>
<li>The <code>massAttack</code> function will now default to the action variable's duration if no duration is passed as an argument.</li>
<li>Fixed a typo that prevented Berserker from being applied properly.</li>
<li>Dispel abilities (Restoration/Neutralize/Cleanse) should now work correctly.</li>
<li>Added a "user-defined variables" passage to be included in StoryInit. You can now keep your own StoryInit functionality completely separate from the engine's code, instead of needing to juggle multiple StoryInit files.</li>
</ul>
Version 1.0-beta
<ul>
<li><b>Equipment is in!</b> Party Picker updated with a page for equipment and a corresponding GUI. Make sure to grab the new and updated CSS files so they display properly.</li>
<li>New widget: <code>equipmentlist</code>.</li>
<li>New function <code>unequipAll</code> added to Actor class.</li>
<li>Items now consume 2 Energy when used.</li>
<li>Fixed a bug that allowed you to add extra characters to your party through the party picker.</li>
<li><code>actionList</code> updated to display passive abilities when out of battle.</li>
<li>HP regeneration implemented. Puppets and enemies will both regain a percentage of their max HP based on their <code>HPregen</code> attribute at the start of their turns. You can play with this by equipping the "Color of Growth" item.</li>
<li>Effect descriptions are no longer bolded, and effect names are no longer underlined.</li>
<li>Updated documentation for new features.</li>
<li>Updated this changelong to display in reverse chronological order.</li>
</ul>
Version 0.99-beta
* <code>Inventory</code> objects now revive correctly, and <code>Item</code> objects will no longer be revived as <code>ItemActions</code>.
* Battle flow now works through <code>replace</code> macros instead of passage jumps. This should speed up battles considerably.
* Defeated characters will now have their command menus hidden instead of displaying an ugly blank box.
* Added a <code>longreturn</code> widget using the functionality described in the SugarCube v2 documentation.

Version 0.95
* Custom objects are now serializable, with custom <code>clone()</code> and <code>toJSON()</code> functions. <code>Actor</code>, <code>Action</code>, and <code>Inventory</code> are revived to exact copies of their old versions, while <code>Item</code> and <code>Effect</code> are revived to new versions using only their name ID. This allows changes made to the database to be incorporated when loading saves from an earlier version.
** A section on this has been added to the documentation.
* Rehauled inventory. It now functions like a Map, meaning you can just call up the item name to find something instead of using the <code>find</code> widget.
* Equipment is in, but untested. It <i>should</i> work, but no promises.
* <code>effectmanager</code> and <code>removeEffect</code> have been made obsolete by applying equipment logic to status effects. Effects now apply their changes through instance functions called on application and removal and defined in the effect database. Method functions for adding and removing effects have been added to the Actor class to facilitate this. Call them with a <code>print</code> statement to get the add/removal text, or use a <code>run</code> statement to mask it.
** Damage-over-time calculations are also now handled through instance methods defined in the effect database. Pass the character to the effect's <code>damage()</code> function to calculate how much damage they take. The function returns the damage value, so pair it with a <code>set $dmg =</code> to store it or a <code>print</code> to show the value (such as in the status pane).
*** The messages displayed when DoT is triggered have also been tied to effect definitions.
* setTol and getTol changed for more clarity and to facilitate modular changes from equipment. Setter is now both relative and absolute: if a tolerance doesn't exist, it will create one, and if a tolerance does exist, it'll add the passed value. Immunity is now handled through a third attribute that can be set by passing a Boolean for a value.
* Modified spell effects are now handled through the <code>spellMod()</code> attribute function rather than the "spell check" passage; see documentation for details.
* Added Actor method functions: setHP and setMaxHP.
* Status effect previews now provide the duration of the effect.
* Effect database link added to the documentation.
* Enemy AoE attacks that mimic player attacks will now target the player's party instead of the enemies.
* Corrected a key/value mixup in <code>decCD()</code>. Enemy cooldown should now work correctly.
* Enemy actions will no longer produce an error if they fail to find a target. (Thanks to Reddit user itaigreif for finding this.)
* Corrected a subjective/objective mixup in the pronoun object.
* Stat and elemental affinity displays are now right-justified for a more consistent appearance.
* All passages excepting the landing have been exported to twee files, because I got sick of having to wade through Twine 2 to edit things. Enjoy Ctrl+F.
* Fixed a typo in <code>deathcheck</code> that caused a fatal error.
* Fixed several mixups in surrender logic. Surrendering enemies should now work correctly.

Version 0.9
* Massive rehaul. Actions, puppets, enemies, items, and effects now properly defined in database JavaScript files. Many widgets offloaded to JavaScript functions, and battle passage code tweaked for greater modularity. Actions now display fully consistently with special formatting that looks much neater and more professional.
* Added support for elemental affinities and status effect tolerance.
* Passages moved further down in the story map to hopefully prevent overlapping of story files when importing the engine through compilers.

Version 0.57
* New puppets added: the Archer, the Cleric, and the Witch! These are all specialists with 50 in one stat and 20 in both others. Anyone who felt the battles took too long should try out Archer. They have not been balance-tested at all, so do tell of any hilarious gamebreaking situations you encounter.
* Action text added for all actions, and restructured the passage so it displays more consistently. A few other things have also been tidied behind the scenes to hopefully make the code easier to use.

Version 0.56
* New puppet added: the Bard! They are a jack-of-all-trades character designed to exploit the stackability of basic debuffs. I have not balance-tested them at all so please try them out.
* Relatedly: party member swap functionality is in! I plan to tweak it later but it currently works as long as your characters aren't modified in any way between swaps. (Thanks to greyelf for helping me with the visual elements.)
* Martyr is now removed if someone else uses it at the same time.
* Stun wearing off will no longer trigger an infinite loop.
* Tweaked the way some passages and widgets worked for more modularity and readability.

Version 0.55
* Completely rehauled the way stats are formatted: they are now all bound to a single Map object with sub-attributes for base values and temporary modifiers. Getter and setter functions added to enable easy access to these values.
* Effect manager now only runs when necessary instead of all the time! This will probably save your processor a lot of grief.
* Relatedly, Protector SHOULD finally behave properly.
* Documentation updated to reflect changes.
* Added new passage for discussing implementation of extra features.
* Added information about level up mechanics, and added example implementation for both standard level up mechanics and a point-buy system.

Version 0.54
* Added difficulty settings! Hard mode is the original targeting model. Easy mode will disable smart targeting altogether. Medium mode will still have smart targeting, but vulnerable characters will only get preferential chances of being targeted rather than being the only possible targets. Documentation will be updated when time permits.

Version 0.53.1
* Design notes on status effects and battle flow added.
* Model passages added to enable use of different battle flow systems.

Version 0.53
* Documentation actually updated to reflect changes.

Version 0.52.1
* Streamlined some things in backend to be more readable. Effect adder now filters by attribute like the effect manager does, and if statements in story JavaScript changed to switches. I think I fixed all bugs created by this change, but do tell me if you encounter anything.
* Pronouns added as attributes in the "Actor" class to make system text easier, like I alluded to in earlier versions of the documentation. Constructor must now take a gender (as a single uppercase character, F/M/N) as its final argument.
* Documentation updated to reflect changes.

Version 0.52
* Stat mod glitch should be fixed.
* Alert application now produces no message, as intended.

Version 0.51
* Protector no longer causes an error in PassageDone, and should be removed properly if the protected character dies.

Version 0.5
* Initial release.
